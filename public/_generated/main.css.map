{
  "version": 3,
  "file": "main.css",
  "sources": [
    "../../src/library/LazyComponent.html",
    "../../src/library/NotebookLink.html",
    "../../src/components/App.html",
    "../../src/diagrams/ModelOverview.html",
    "../../src/diagrams/Overview.html",
    "../../src/diagrams/GridDetail.html",
    "../../src/diagrams/ClassSubset.html",
    "../../src/diagrams/ClassComparison.html",
    "../../src/diagrams/Adversarial.html",
    "../../src/diagrams/ClassGradient.html",
    "../../src/diagrams/Samples.html",
    "../../src/diagrams/ClassGrids.html",
    "../../src/diagrams/ActivationGrid.html",
    "../../src/diagrams/OneLayer.html",
    "../../src/diagrams/LayerAnnotation.html",
    "../../src/diagrams/ShowAPath.html",
    "../../src/diagrams/VerticalLayerAnnotation.html",
    "../../src/diagrams/Focus1.html",
    "../../src/diagrams/Focus2.html",
    "../../src/diagrams/Focus3.html",
    "../../src/diagrams/Focus3Table.html",
    "../../src/library/Loading.html",
    "../../src/Atlas.html",
    "../../src/library/Button.html",
    "../../src/components/AppMiniMap.html",
    "../../src/components/AppLayerChooser.html",
    "../../src/components/AppClassFilter.html",
    "../../src/library/LazyImage.html",
    "../../src/diagrams/ClassAtlas.html",
    "../../src/AtlasThumbnail.html",
    "../../src/AtlasReticle.html",
    "../../src/SetOfIcons.html",
    "../../src/components/Loupe.html",
    "../../src/library/App/Panel.html",
    "../../src/Zoom.html",
    "../../src/library/Placeholder.html"
  ],
  "sourcesContent": [
    "<!-- \n  Defers initialization of a component until it comes into view.\n  Also allows for external loading of the component's module.\n\n  component: a constructor for the component to initialize lazily.\n  url: optional url to a module.js file to load an then use to initialize\n  the component.\n  componentData: The data to pass to the component when initializing.\n\n  This requires us to know the size of the component before it's initialized.\n  We do this with two properties.\n\n  height: Simply uses this constant value.\n\n  aspectRatio (w/h): used the width of the element to compute the height based on \n  this ratio. When aspectRatio is used, an optional property \"minHeight\" is \n  available.\n -->\n\n<Radar bind:ready=\"radarReady\" :offscreen :onscreen >\n  <div ref:container bind:clientWidth=\"width\" style=\"height: {finalHeight}px;\">\n    {#if ready}\n      <svelte:component this={component} {...componentData}/>\n    {:else}\n      <Loading />\n    {/if}\n  </div>\n</Radar>\n\n<script>\n  export default {\n    components: {\n      Radar: \"./Radar.html\",\n      Loading: \"./Loading.html\"\n    },\n    data() {\n      return {\n        component: null,\n        url: null,\n        componentData: null,\n        radarReady: false,\n        onscreen: false,\n        offsreen: true,\n        height: false,\n        width: null,\n        aspectRatio: null,\n        minHeight: null\n      }\n    },\n    computed: {\n      ready: ({radarReady, component}) => (radarReady && component) ? true : false,\n      finalHeight: ({width, height, aspectRatio, minHeight}) => {\n        if (height) {\n          return height;\n        } else if (aspectRatio) {\n          let h = width / aspectRatio;\n          if (minHeight) {\n            return Math.min(minHeight, h);\n          } else {\n            return h;\n          }\n        }\n      } \n    },\n    oncreate() {\n      // TODO: Make sure we have some sizes set.\n      const {height, aspectRatio} = this.get();\n      if (!height && !aspectRatio) {\n        console.warn(`Require 'height'${height} or 'aspectRatio'${aspectRatio} not set on LazyComponent.html`, this)\n      }\n      // Import a remote component if given\n      const {url} = this.get();\n      if (url) {\n        import(url).then(c => {\n          this.set({component: c.default});\n        });\n      }\n    }\n  }\n</script>\n\n<style>\nref:container {\n  display: block;\n  position: relative;\n  overflow: hidden;\n  contain: layout paint;\n}\n</style>",
    "<a href=\"{url}\"class=\"root emphasis-{emphasis}\">\n  <svg viewBox=\"0 0 18 18\">\n    <path d=\"M14,2c0-0.3-0.2-0.5-0.5-0.5S13,1.7,13,2v12c0,0.6-0.4,1-1,1H3.1c-0.3,0-0.5-0.1-0.7-0.3L1.7,14h8.8c0.8,0,1.5-0.7,1.5-1.5\n      l0-11C12,0.7,11.3,0,10.5,0l-9,0C0.7,0,0,0.7,0,1.5v12.1c0,0.3,0.1,0.5,0.3,0.7l1.4,1.4C1.9,15.9,2.1,16,2.4,16h10.1\n      c0.8,0,1.5-0.7,1.5-1.5l0-1.8C14,9,14,2,14,2z M9.1,9.6c0,0.3-0.2,0.5-0.5,0.5H5.4c-0.3,0-0.5-0.2-0.5-0.5s0.2-0.5,0.5-0.5h3.1\n      C8.8,9.1,9.1,9.3,9.1,9.6z M2.3,4.7C2.1,4.5,2.1,4.2,2.3,4C2.5,3.8,2.8,3.8,3,4l2.8,2.6L3,9.3C2.9,9.4,2.8,9.4,2.7,9.4\n      c-0.1,0-0.3-0.1-0.4-0.2c-0.2-0.2-0.2-0.5,0-0.7l2-1.9L2.3,4.7z\"/>\n  </svg>\n  <span>{text}</span>\n</a>\n\n<script>\nexport default {\n  data() {\n    return {\n      url: \"\",\n      text: \"Try in a notebook\",\n      emphasis: 1, // 0,1,2\n    }\n  }\n}\n</script>\n\n<style>\n  .root {\n    position: relative;\n    display: inline-block;\n    padding: 4px 8px 4px 24px;\n    border-radius: 4px;\n    font-size: 11px!important;\n    text-decoration: none;\n    font-weight: 500;\n    border: solid 1px rgba(0, 0, 0, 0.1);\n    text-transform: uppercase;\n    line-height: 16px;\n  }\n  .emphasis-0.root {\n    border-color: rgba(0, 0, 0, 0);\n    color: #ff6600;\n  }\n  .emphasis-1.root {\n    border-color: rgba(0, 0, 0, 0.1);\n    color: #ff6600;\n  }\n  .emphasis-2.root {\n    border-color: #ff6600;\n    color: white;\n    background: #ff6600;\n  }\n  svg {\n    position: absolute;\n    top: 4px;\n    left: 4px;\n    width: 18px;\n    display: inline-block;\n  }\n  .emphasis-0 svg * {\n    fill: #ff6600;\n  }\n  .emphasis-1 svg * {\n    fill: #ff6600;\n  }\n  .emphasis-2 svg * {\n    fill: white;\n  }\n  span {\n    display: inline-block;\n  }\n</style>",
    "<div class=\"container\">\n    <div class=\"filter\" style=\"display: {showClassFilter ? 'block' : 'none'};\">\n      <Panel>\n        <h2 slot=\"head\">Class Filter</h2>\n        <div slot=\"body\">\n          <AppClassFilter\n            bind:classHeatmap\n          />\n        </div>\n      </Panel>\n    </div>\n    <div class=\"stack\" style=\"display: {showLayerChooser ? 'block' : 'none'};\">\n      <Panel>\n        <h2 slot=\"head\">Layer</h2>\n        <div slot=\"body\">\n          <AppLayerChooser\n            bind:layerName\n            {classHeatmap}\n          />\n        </div>\n      </Panel>\n    </div>\n  <div class=\"main\">\n    <div class=\"atlas\">\n        <Atlas\n          ref:atlas\n          id=\"inceptionv1_{layerName}\"\n          strokeColor=\"#666\"\n          backgroundColor=\"#f0f0f0\"\n          showHoverImage={false}\n          {scaleCountFactor}\n          {classHeatmap}\n          bind:iconCrop \n          bind:classHeatmapMultiplier\n          bind:classHeatmapPositive\n          bind:gridSize\n          bind:showLabels\n          bind:aspectRatio\n          bind:scale\n          bind:gcx\n          bind:gcy\n          {homeX}\n          {homeY}\n          {homeScale}\n        />\n        <div ref:controls>\n          <div class=\"map\" style=\"display: {scale > 1.0 ? 'block' : 'none'};\">\n            <AppMiniMap \n              id=\"inceptionv1_{layerName}\"\n              bind:aspectRatio\n              bind:scale\n              bind:gcx\n              bind:gcy\n              enableDragging={true}\n              {classHeatmap}\n              {scaleCountFactor}\n            />\n          </div>\n          <div class=\"buttons\">\n            <Button on:click=\"refs.atlas.home()\"><Navigation name=\"home\" color=\"white\"/></Button>\n            <Button on:click=\"refs.atlas.zoomit(2)\"><Navigation name=\"add\" color=\"white\"/></Button>\n            <Button on:click=\"refs.atlas.zoomit(0.5)\"><Navigation name=\"remove\" color=\"white\"/></Button>\n          </div>\n        </div>\n    </div>\n  </div>\n  <div class=\"options\">\n    <Panel>\n      <h2 slot=\"head\">Options</h2>\n      <div slot=\"body\" class=\"options-body\">\n\n        <div>\n          <div>x: {@html format(gcx)}</div>\n          <div>y: {@html format(gcy)}</div>\n          <div>scale: {@html format(scale)}</div>\n        </div>\n        <div>\n        <h3>Attribution</h3>\n          <label><input type=checkbox bind:checked=showLabels> show labels</label>\n        </div>\n        <div class=\"grid-size\">\n          <h3>Grid size</h3>\n          <label><input type=radio bind:group=gridSize value={0}> 20x20</label>\n          <label><input type=radio bind:group=gridSize value={1}> 40x40</label>\n          <label><input type=radio bind:group=gridSize value={2}> 80x80</label>\n          <label><input type=radio bind:group=gridSize value={3}> 160x160</label>\n          <label><input type=radio bind:group=gridSize value={4}> 320x320</label>\n        </div>\n        <div>\n          <h3>Icons</h3>\n          <div>density: {@html iconScaleFactor}</div>\n          <input type=\"range\" min={0.2} max={10} step={0.1} bind:value=iconScaleFactor>\n          <br>\n          <div>crop: {@html iconCrop}</div>\n          <input type=\"range\" min={0} max={0.5} step={0.01} bind:value=iconCrop>\n        </div>\n        <div style=\"display: {classHeatmap > -1 ? 'block' : 'none'}\">\n          <h3>Class filter</h3>\n          <div>Intensity: {@html classHeatmapMultiplier}</div>\n          <input type=\"range\" min=0.5 max=2 step=0.1 bind:value=classHeatmapMultiplier>\n          <label><input type=radio bind:group=classHeatmapPositive value={1}> positive influence</label>\n          <label><input type=radio bind:group=classHeatmapPositive value={-1}> negative influence</label>\n        </div>\n      </div>\n    </Panel>\n  </div>\n</div>\n\n\n<script>\nimport {format as f} from \"d3-format\";\n\nexport default {\n  components: { \n    Button: \"../library/Button.html\",\n    Navigation: \"../library/icons/Navigation.html\",\n    AppMiniMap: \"./AppMiniMap.html\",\n    AppLayerChooser: \"./AppLayerChooser.html\",\n    AppClassFilter: \"./AppClassFilter.html\",\n    Atlas: \"../Atlas.html\",\n    Panel: \"../library/App/Panel.html\"\n  },\n  data() {\n    return {\n      layerName: \"mixed4c\",\n      gridSize: 1,\n      classHeatmap: -1,\n      iconScaleFactor: 0.8,\n      iconCrop: 0.3,\n      showClassFilter: true,\n      showLayerChooser: true,\n      homeX: .5,\n      homeY: .5,\n      homeScale: 1,\n    }\n  },\n  computed: {\n    realGridSize: ({gridSize}) => (gridSize + 1) * 20,\n    scaleCountFactor: ({iconScaleFactor, realGridSize}) =>  1000000 / (realGridSize * realGridSize * iconScaleFactor)\n  },\n  helpers: {\n    format: f(\".3f\")\n  }\n}\n</script>\n\n<style>\n  .container {\n    height: 100%;\n    box-sizing: border-box;\n    grid-column: screen;\n    display: flex;\n    overflow: hidden;\n    contain: strict;\n    font-size: 12px;\n    position: relative;\n  }\n\n  /*  */\n  .filter {\n    width: 170px;\n    border-right: solid 1px rgba(0, 0, 0, 0.2);\n  }\n  .stack {\n    overflow-y: scroll;\n    width: 170px;\n    border-right: solid 1px rgba(0, 0, 0, 0.2);\n    height: 100%;\n  }\n  .main {\n    flex-grow: 1;\n    padding: 8px;\n    box-sizing: border-box;\n    height: 100%;\n  }\n  .options {\n    width: 170px;\n    border-left: solid 1px rgba(0, 0, 0, 0.2);\n    line-height: 1.5em;\n  }\n  .options-body {\n    padding: 16px;\n  }\n  /*  */\n  ref:controls {\n    position: absolute;\n    right: 16px;\n    top: 16px;\n    display: flex;\n    padding: 8px;\n    background-color: white;\n    border-radius: 6px;\n    border: solid 1px rgba(0, 0, 0, 0.2);\n  }\n  ref:controls .map {\n    width: 104px;\n    margin-right: 8px;\n  }\n  ref:controls .buttons {\n    width: 32px;\n    display: grid;\n    grid-gap: 4px;\n\n  }\n  .options label {\n    display: block;\n  }\n  .atlas {\n    height: calc(100%);\n    position: relative;\n  }\n</style>",
    "<div ref:root>\n  <LazyImage src=\"assets/images/model.svg\" alt=\"model\" aspectRatio={1072 / 178.3} border={false} background={false}/>\n</div>\n\n<script>\n  export default {\n    components: {\n      LazyImage: \"../library/LazyImage.html\"\n    }\n  }\n</script>\n\n<style>\n  ref:root {\n    margin-bottom: 8px;\n  }\n</style>",
    "<div ref:root>\n  <div>\n    <h4>Individual Neurons</h4>\n    <LazyImage\n      src=\"assets/images/overview-neuron.jpg\"\n      border={false}\n    />\n    <div class=\"figcaption\">Visualizing individual neurons make hidden layers somewhate meaningful, but misses interactions between neurons.</div>\n  </div>\n  <div>\n    <h4>Pairwise Interactions</h4>\n    <LazyImage\n      src=\"assets/images/overview-pairwise.jpg\"\n      border={false}\n    />\n    <div class=\"figcaption\">Studying pairwise interaction surfaces some interaction effects, but doesn't show interactions between many and the space of possible pairs is huge.</div>\n  </div>\n  <div>\n    <h4>Spatial Activations</h4>\n    <LazyImage\n      src=\"assets/images/activation-grid.png\"\n      border={false}\n    />\n    <div class=\"figcaption\">Spatial activations show important combinations of many neurons, but are focused on a single example.</div>\n  </div>\n  <div>\n    <h4>Activation Atlas</h4>\n    <LazyImage\n      src=\"assets/images/overview-atlas.jpg\"\n      border={false}\n    />\n    <div class=\"figcaption\">Activation atlases show important combinations of neurons, but give a bigger picture overview.</div>\n  </div>\n</div>\n\n<script>\n  export default {\n    components: {\n      LazyImage: \"../library/LazyImage.html\"\n    }\n  }\n</script>\n\n<style>\n  ref:root {\n    display: grid;\n    grid-gap: 40px;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n  }\n  h4 {\n    border-bottom: solid 1px rgba(0, 0, 0, 0.1);\n    padding-bottom: 8px;\n    margin-top: 0;\n  }\n  .figcaption {\n    margin-top: 16px;\n  }\n</style>",
    "\n<div class=\"root\">\n  <div>\n    <LazyImage \n      src=\"assets/images/dogcat.jpg\"\n      alt=\"input image\"\n    />\n    <div class=\"figcaption\">Input image from ImageNet.</div>\n  </div>\n  <div>\n    <LazyImage \n      src=\"assets/images/dogcat-grid.jpg\"\n      alt=\"activation grid\"\n    />\n    <div class=\"figcaption\">Activation grid from InceptionV1, layer mixed4d.</div>\n  </div>\n</div>\n\n<script>\nexport default {\n  components: {\n    LazyImage: \"../library/LazyImage.html\"\n  }\n}\n</script>\n\n<style>\n  .root {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 10px;\n  }\n  .figcaption {\n    margin-top: 8px;\n  }\n</style>",
    "<h4>Class Activation Atlas for “{$inceptionLabels[currentClass]}”</h4>\n<div ref:root>\n  <div style=\"position: relative;\">\n    <ClassAtlas classFilter={currentClass}/>\n  </div>\n  <div class=\"chooser-container\">\n    <div class=\"chooser\">\n      {#each classes as c}\n        <label class=\"{currentClass === c ? 'selected' : ''}\">\n          <input type=radio bind:group=currentClass value={c}>\n          {$inceptionLabels[c]} ({c})\n        </label>\n      {/each}\n    </div>\n  </div>\n</div>\n<div style=\"margin-top: 16px;\">\n  <NotebookLink url=\"\"/>\n</div>\n\n<script>\nexport default {\n  components: { \n    ClassAtlas: \"./ClassAtlas.html\",\n    NotebookLink: \"../library/NotebookLink.html\"\n  },\n  data() {\n    return {\n      layout: 0,\n      currentClass: 62,\n      // classes: [7,9,1,2,12,13,14,24,61,62,76,80,81,169,188,225,226,233,249,288,309,312,322,323,378,652,665,780,804,901,946,992,274,279,286,543,544,55,76,622,631,645,643,671,672,507,982,897,701,777,831,990,677,822,947,348,355,746,827, 721,582,827,359,361,367,359,367,364,543,544,737,738,737,738,736,744,176,67,28,205,102,62,791,287,235],\n      classes: [62,7,2,12,80,225,652,233,322,323,378,665,780,804,901,946,992,622,631,643,671,672,507,982,990,677,822,947,348,355,721,582,361,364,737,738,736,744,791,287,235],\n    }\n  }\n}\n</script>\n\n<style>\n  ref:root {\n    position: relative;\n    display: grid;\n    grid-template-columns: 4fr 1fr;\n    grid-gap: 20px;\n  }\n  h4 {\n    margin-top: 0;\n  }\n  button {\n    display: block;\n    width: 100%;\n  }\n  .chooser-container {\n    overflow-y: scroll;\n    height: 100%;\n    position: relative;\n  }\n\n  .chooser {\n    position: absolute;\n    border-left: solid 1px #ddd;\n  }\n  .chooser label {\n    position: relative;\n    font-size: 10px;\n    line-height: 1em;\n    display: block;\n    border-left: solid 3px white;\n    padding: 5px 20px 5px 16px;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow-y: hidden;\n  }\n  .chooser label input {\n    position: absolute;\n    opacity: 0;\n  }\n  .chooser label.selected {\n    border-left-color: rgb(255, 130, 0);\n    color: rgb(255, 130, 0);\n    background-color: rgba(255, 130, 0, 0.08);\n    font-weight: bold;\n  }\n</style>",
    "{#if showControls}\n  {#each $classComparisons as comparison, i}\n    <button on:click=\"set({classComparisonIndex: i})\">{comparison.leftLabel} vs. {comparison.rightLabel}</button>\n  {/each}\n{/if}\n\n<div style=\"display: grid; grid-auto-flow: column; grid-column-gap: 20px; grid-auto-columns: 1fr;\">\n  <div>\n    <h4>“{$inceptionLabels[leftIndex]}”</h4>\n    <div class=\"atlas\">\n      <ClassAtlas classFilter={leftIndex} />\n    </div>\n  </div>\n  <div>\n    <h4>“{$inceptionLabels[rightIndex]}”</h4>\n    <div class=\"atlas\">\n      <ClassAtlas classFilter={rightIndex} />\n    </div>\n  </div>\n</div>\n\n<script>\nexport default {\n  components: {\n    ClassAtlas: \"./ClassAtlas.html\"\n  },\n  data() {\n    return {\n      classComparisonIndex: 0,\n      showControls: true\n    };\n  },\n  computed: {\n    leftIndex: ({$classComparisons, classComparisonIndex}) =>  $classComparisons[classComparisonIndex].left,\n    rightIndex: ({$classComparisons, classComparisonIndex}) => $classComparisons[classComparisonIndex].right,\n  }\n}\n</script>\n\n<style>\n.figcaption {\n  margin-top: 20px;\n}\n.figcaption b {\n  text-transform: uppercase;\n  margin-right: 8px;\n}\nh4 {\n  margin-top: 0;\n}\n</style>",
    "<div class=\"adversarial\" style=\"grid-template-columns: repeat({classifications.length}, 1fr);\">\n  {#each classifications as c}\n    <div>\n      <LazyImage \n        src=\"{c.image}\"\n        alt=\"{left} / {right}\"\n        {aspectRatio}\n      />\n      <table>\n        {#each c.rows as row, i}\n        <tr class=\"{row[0] === left ? 'left' : ''} {row[0] === right ? 'right' : ''}\">\n          <td>{i + 1}. </td>\n          <td>{row[0]}</td>\n          <td>{f(row[1])}%</td>\n        </tr>\n        {/each}\n      </table>\n      <div class=\"figcaption\">{c.caption}</div>\n    </div>\n  {/each}\n</div>\n\n\n<script>\nimport {format} from \"d3-format\";\nexport default {\n  components: {\n    LazyImage: \"../library/LazyImage.html\"\n  },\n  data() {\n    return {\n      image: \"\",\n      left: \"\", \n      right: \"\",\n      classifications: [],\n      aspectRatio: 1\n    }\n  },\n  helpers: {\n    f: format(\".1f\")\n  }\n}\n</script>\n\n<style>\n.adversarial {\n  display: grid;\n  grid-column-gap: 30px;\n}\ntable {\n  width: 100%;\n  border-top: solid 1px #ddd;\n  margin: 8px 0 16px 0;\n}\ntable td {\n  font-size: 13px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\ntable td:last-child {\n  text-align: right;\n}\ntable tr:first-child {\n  font-weight: bold;\n}\n.left {\n  background-color: hsla(100, 90%, 50%, 0.15);\n}\n.right {\n  background-color: hsla(200, 90%, 50%, 0.15);\n}\n</style>",
    "<!-- {#each $classComparisons as comparison, i}\n  <button on:click=\"set({currentClassComparisonIndex: i})\">{comparison.leftLabel} vs. {comparison.rightLabel}</button>\n{/each} -->\n\n<div class=\"overlay-wrap\" >\n  <svg class=\"overlay\" viewBox=\"0 0 {outerWidth} {outerHeight}\">\n\n    <!-- arrowheads -->\n\n  \t<defs>\n      \t<marker id=\"{'arrow'}\" markerWidth=\"7\" markerHeight=\"7\" refX=\"10\" refY=\"5\" orient=\"auto\" markerUnits=\"strokeWidth\" viewBox=\"0 0 10 10\">\n        \t\t<path d=\"M0,0 L0,10 L10,5 z\" fill=\"{color}\" />\n      \t</marker>\n  \t</defs>\n\n    <g transform=\"translate({margin.left},{margin.top})\">\n\n      <!-- image -->\n\n      <image \n        id=\"comparisonImg\"\n        {width}\n        {height}\n        xlink:href=\"https://storage.googleapis.com/activation-atlas/build/gradients/gradients/gradients--comparison={comparison.id}--tries=4--alpha=False--tile_size=10--whiten=true--steps=1024--icon_size=90--grid_size=10--layer=mixed5b--model=InceptionV1--sample_images=1000000--sample_type=random.jpg\" \n        alt={comparison.label}\n      />\n\n      <!-- x-axis labels -->\n\n      <g transform=\"translate({width / 2}, 0)\">\n        <text y=\"-50\" text-anchor=\"end\">\n          <tspan x=\"-10\" dy=\"1.3em\">more attributed to </tspan>\n          <tspan x=\"-10\" dy=\"1.3em\" font-weight=\"bold\">{comparison.leftLabel}</tspan>\n        </text>\n        <text y=\"-50\">\n          <tspan x=\"10\" dy=\"1.3em\">more attributed to </tspan>\n          <tspan x=\"10\" dy=\"1.3em\" font-weight=\"bold\">{comparison.rightLabel}</tspan>\n        </text>\n\n        <g transform=\"translate(0, -28)\">\n          <line x2=\"-50\" transform=\"translate(-120,0)\" stroke={color} marker-end=\"url(#{'arrow'})\"></line>\n          <line x2=\"50\" transform=\"translate(120,0)\" stroke={color} marker-end=\"url(#{'arrow'})\"></line>\n        </g>\n      </g>\n\n      <!-- y-axis labels -->\n\n      <g transform=\"translate({- margin.left + 8},{height/2})\">\n        <g transform=\"translate(10, 0)\">\n          <line y2=\"-50\" transform=\"translate(0,-38)\" stroke={color} marker-end=\"url(#{'arrow'})\"></line>\n          <line y2=\"50\" transform=\"translate(0,30)\" stroke={color} marker-end=\"url(#{'arrow'})\"></line>\n        </g>\n        <text alignment-baseline=\"middle\">\n          <tspan x=\"0\" y=\"-1.8em\">positioned</tspan>\n          <tspan x=\"0\" y=\"-0.6em\">by similarity</tspan>\n          <tspan x=\"0\" y=\"0.6em\">(one-dimensional</tspan>\n          <tspan x=\"0\" y=\"1.8em\">t-SNE)</tspan>\n        </text>\n      </g>\n\n      <!-- Ticks -->\n\n      <g transform=\"translate({width / 2}, 0)\">\n        <line y1={-margin.top + 4} y2=\"{height + 8}\" stroke=\"white\" stroke-width=\"5\" stroke-opacity=\"0.6\"></line>\n        <line y1={-margin.top + 4} y2=\"{height + 8}\" stroke=\"black\"></line>\n      </g>\n\n      {#each range(11) as tick}\n        <line x2={width} transform=\"translate(0, {tick * (height / 10)})\" stroke=\"black\" stroke-opacity=\"0.15\" stroke-dasharray=\"2,2\"/>\n      {/each}\n\n      {#each range(11) as tick}\n        <line y2={width} transform=\"translate({tick * (height / 10)}, 0)\" stroke=\"black\" stroke-opacity=\"0.15\" stroke-dasharray=\"2,2\"/>\n      {/each}\n\n      <!-- Annotations -->\n\n      {#if comparison.annotation}\n        {#each comparison.annotation as annotation,iter}\n          <g transform=\"translate(0, {(annotation.pos.x + 0.5) * cellWidth})\">\n            <line x1={(annotation.pos.y + 0.5) * cellWidth + cellWidth / 2 * Math.sqrt(2)} x2={width + 10} stroke=\"black\" stroke-opacity=\"0.4\"/>\n            <text x={width + 20} alignment-baseline=\"middle\">{annotation.desc}</text>\n          </g>\n          <g transform=\"translate({(annotation.pos.y + 0.5) * cellWidth}, {(annotation.pos.x + 0.5) * cellWidth})\">\n            <circle r={cellWidth / 2 * Math.sqrt(2)} fill=\"none\" stroke=\"white\" stroke-opacity=\"0.5\" stroke-width=\"5\"/>\n            <circle r={cellWidth / 2 * Math.sqrt(2)} fill=\"none\" stroke=\"black\" stroke-opacity=\"1\"/>\n          </g>\n        {/each}\n      {/if}\n\n    </g>\n  </svg>\n</div>\n<script>\n\nimport {range} from \"d3-array\";\n\nexport default {\n  components: { \n  },\n  data() {\n    return {\n      width: 504,\n      selected: 0,\n      margin: {\n        top: 60,\n        right: 80,\n        bottom: 40,\n        left: 80\n      },\n      color: '#9a9cad',\n      currentClassComparisonIndex: 0\n    }\n  },\n  computed: {\n    height: ({width}) => width,\n    outerWidth: ({width, margin}) => width + margin.left + margin.right,\n    outerHeight: ({height, margin}) => height + margin.top + margin.bottom,\n    cellWidth: ({width}) => width / 10,\n    comparison: ({currentClassComparisonIndex, $classComparisons}) => $classComparisons[currentClassComparisonIndex],\n  },\n  helpers: {\n    range\n  }\n}\n</script>\n\n<style>\n  svg text {\n    font-size: 13px;\n    fill-opacity: 0.6;\n  }\n  .overlay-wrap {\n  \tposition: relative;\n  }\n</style>\n\n",
    "<div ref:root>\n  <div>\n    <h4>10,000 activations</h4>\n    <LazyImage\n      src=\"assets/images/render--x%3D0--y%3D0--tries%3D4--alpha%3DFalse--tile_size%3D20--whiten%3Dtrue--steps%3D1024--icon_size%3D80--grid_size%3D20--layout%3D50_0.05_cosine--class_filter%3DNone--filter%3D10000--layer%3Dmixed4c--model%3DInceptionV1--sample_images%3D1000000--sample_type%3Drandom.jpg\"\n      alt=\"10,000 activations\"\n    />\n  </div>\n  <div>\n    <h4>100,000 activations</h4>\n    <LazyImage\n      src=\"assets/images/render--x%3D0--y%3D0--tries%3D4--alpha%3DFalse--tile_size%3D20--whiten%3Dtrue--steps%3D1024--icon_size%3D80--grid_size%3D20--layout%3D50_0.05_cosine--class_filter%3DNone--filter%3D100000--layer%3Dmixed4c--model%3DInceptionV1--sample_images%3D1000000--sample_type%3Drandom.jpg\"\n      alt=\"100,000 activations\"\n    />\n  </div>\n  <div>\n    <h4>1,000,000 activations</h4>\n    <LazyImage\n      src=\"assets/images/render--x%3D0--y%3D0--tries%3D4--alpha%3DFalse--tile_size%3D20--whiten%3Dtrue--steps%3D1024--icon_size%3D80--grid_size%3D20--layout%3D50_0.05_cosine--class_filter%3DNone--filter%3D1000000--layer%3Dmixed4c--model%3DInceptionV1--sample_images%3D1000000--sample_type%3Drandom.jpg\"\n      alt=\"1,000,000 activations\"\n    />\n  </div>\n</div>\n\n<script>\n  export default {\n    components: {\n      LazyImage: \"../library/LazyImage.html\"\n    }\n  }\n</script>\n\n<style>\n  ref:root {\n    margin-right: 20px;\n    margin-left: 20px;\n    grid-column: screen;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-gap: 20px;\n  }\n</style>",
    "<div style=\"display: grid; grid-auto-flow: column; grid-column-gap: 20px; grid-auto-columns: 1fr;\">\n  <div>\n      <div class=\"atlas\">\n        <LazyImage src=\"assets/images/grid-size-32x32.png\" alt=\"32 x 32\"/>\n      </div>\n      <div class=\"figcaption\"><b>32 x 32</b> When the grid is too small, the feature visualizations are too small to see.</div>\n  </div>\n  <div>\n      <div class=\"atlas\">\n        <LazyImage src=\"assets/images/grid-size-8x8.png\" alt=\"8 x 8\"/>\n      </div>\n      <div class=\"figcaption\"><b>8 x 8</b> When just right, the activation atlas shows all the concepts with feature visualizations that are big enough to see.</div>\n  </div>\n  <div>\n      <div class=\"atlas\">\n        <LazyImage src=\"assets/images/grid-size-2x2.png\" alt=\"2 x 2\"/>\n      </div>\n      <div class=\"figcaption\"><b>2 x 2</b> When the grid is too big, concepts are lost in the averages. One sees less diversity within related concepts.</div>\n  </div>\n</div>\n\n<script>\n  export default {\n    components: { LazyImage: \"../library/LazyImage.html\" }\n  }\n</script>\n\n<style>\n  .figcaption {\n    margin-top: 8px;\n  }\n</style>",
    "<div style=\"position: relative; background: white; text-align: right;\" on:mouseout=\"set({timerCount: 47})\">\n  <Figure bind:onscreen on:onscreen=\"set({timerCount: 47})\"/>\n\n  <svg style=\"width: 100%;\" viewBox=\"0 0 {width} {height}\">\n    <clipPath id=\"activationGridClipRect\">\n      <rect x={windowX * cellWidth} y={windowY * cellWidth} width={cellWidth} height={cellWidth}/>\n    </clipPath>\n\n    <clipPath id=\"activationGridClipRectInput\">\n      <rect x={windowX * inputCellWidth} y={windowY * inputCellWidth} width={inputCellWidth * windowSize} height={inputCellWidth * windowSize}/>\n    </clipPath>\n\n    <g transform=\"translate(0, 30)\">\n      <!-- 0 -->\n      <g transform=\"translate(0, 0)\">\n        <text class=\"head\" dy=\"-13\">Input image</text>\n        <image xlink:href=\"assets/images/dogcat.jpg\" width={inputWidth} height={inputWidth}/>\n        {#each range(numInputCells) as y}\n          {#each range(numInputCells) as x}\n            <rect \n              on:mouseover=\"set({timerCount: Math.min(numCells - 1, Math.max(0, y - windowSize + 2)) * numCells + Math.min(numCells - 1, Math.max(0, x - windowSize + 2))})\"\n              stroke=\"white\"\n              fill=\"#aaa\" \n              fill-opacity={x >= windowX && x < (windowX + windowSize) && y >= windowY && y < (windowY + windowSize) ? 0.01 : 0.5} \n              stroke-opacity=0.2 stroke-width=1 x={x * (inputCellWidth + cellPadding)} y={y * (inputCellWidth + cellPadding)} \n              width={inputCellWidth} height={inputCellWidth}\n            />\n          {/each}\n        {/each}\n        <rect stroke=\"rgb(255, 170, 0)\" pointer-events=\"none\" stroke-width=2 fill-opacity=0 x={windowX * inputCellWidth} y={windowY * inputCellWidth} width={inputCellWidth * windowSize} height={inputCellWidth * windowSize}/>\n      </g>\n      <!-- 1 -->\n      <g transform=\"translate({inputWidth + columnMargin}, 0)\">\n        <path class=\"arrow\" transform=\"translate(0,{columnWidth / 2})\" d=\"M{-2 * columnMargin / 3},0 L{-columnMargin / 3},0 m-5,-5 l5,5 l-5,5\"/>\n        <text class=\"head\" dy=\"-13\">Image patch</text>\n        <g transform=\"scale({columnWidth / (inputCellWidth * windowSize)})translate(-{windowX * inputCellWidth}, -{windowY * inputCellWidth})\">\n          <image\n            image-rendering=\"pixelated\"\n            xlink:href=\"assets/images/dogcat.jpg\" width={inputWidth} height={inputWidth}\n            clip-path=\"url(#activationGridClipRectInput)\"\n          />\n        </g>\n        <rect stroke=\"rgb(255, 170, 0)\" stroke-width=4 fill-opacity=0 width={columnWidth} height={columnWidth}/>\n        <text class=\"figcaption\" transform=\"translate(0, {columnWidth + 10})\">\n          <tspan x=0 dy=\"1.4em\">Overlapping patches</tspan>\n          <tspan x=0 dy=\"1.4em\">of the input image are</tspan>\n          <tspan x=0 dy=\"1.4em\">evaluated one by one.</tspan>\n        </text>\n      </g>\n      <!-- 2 -->\n      <g transform=\"translate({inputWidth + columnMargin + columnWidth + columnMargin}, 0)\">\n        <path class=\"arrow\" transform=\"translate(0,{columnWidth / 2})\" d=\"M{-2 * columnMargin / 3},0 L{-columnMargin / 3},0 m-5,-5 l5,5 l-5,5\"/>\n        <text class=\"head\" dy=\"-13\">Activations</text>\n      {#each activations[windowX][windowY] as activation, i}\n        {#if i !== activations[windowX][windowY].length - 1}\n        <g transform=\"translate(0,{20 + 20 * (activations[0][0].length - 1)})\">\n          <text transform=\"rotate(90)translate(-7, -25)\" font-size=11>…</text>\n          <line y1=7 y2=7 stroke=\"#eee\" x2={inputWidth * 2 / 3 - 20} />\n        </g>\n        {/if}\n        <g transform=\"translate(0,{i === activations[0][0].length - 1 ? 20 + 20 * (i + 1) : 20 + 20 * i })\">\n          <text font-size=11 fill=\"#999\" dy=>neuron {i === activations[0][0].length - 1 ? 512 : i}:</text>\n          <text text-anchor=\"end\" font-size=11 font-family=\"monospace\" dx={inputWidth * 2 / 3 - 20}>{format(activation)}</text>\n          <line y1=7 y2=7 stroke=\"#eee\" x2={columnWidth} />\n        </g>\n      {/each}\n\n      <text class=\"figcaption\" transform=\"translate(0, {columnWidth + 10})\">\n          <tspan x=0 dy=\"1.4em\">We record a single </tspan>\n          <tspan x=0 dy=\"1.4em\">activation value for each </tspan>\n          <tspan x=0 dy=\"1.4em\">of the 512 neurons.</tspan>\n          <tspan x=0 dy=\"1.4em\">(values shown are mocked)</tspan>\n        </text>\n        \n      </g>\n      <!-- 3 -->\n      <g transform=\"translate({inputWidth + columnMargin + 2 * (columnWidth + columnMargin)}, 0)\">\n        <path class=\"arrow\" transform=\"translate(0,{columnWidth / 2})\" d=\"M{-2 * columnMargin / 3},0 L{-columnMargin / 3},0 m-5,-5 l5,5 l-5,5\"/>\n        <text class=\"head\" dy=\"-13\">Feature visualization</text>\n        <g transform=\"scale({columnWidth / cellWidth})translate(-{windowX * cellWidth}, -{windowY * cellWidth})\">\n          <image \n            image-rendering=\"pixelated\"\n            xlink:href=\"assets/images/dogcat-grid.jpg\" width={inputWidth} height={inputWidth}\n            clip-path=\"url(#activationGridClipRect)\"\n          />\n        </g>\n        <rect stroke=\"#ff6600\" stroke-width=4 fill-opacity=0 width={columnWidth} height={columnWidth}/>\n\n        <text class=\"figcaption\" transform=\"translate(0, {columnWidth + 10})\">\n          <tspan x=0 dy=\"1.4em\">We then produce a  </tspan>\n          <tspan x=0 dy=\"1.4em\">feature visualization</tspan>\n          <tspan x=0 dy=\"1.4em\">and place them on a grid.</tspan>\n        </text>\n      </g>\n      <!-- 4 -->\n      <g transform=\"translate({inputWidth + columnMargin + 3 * (columnWidth + columnMargin)}, 0)\">\n        <path class=\"arrow\" transform=\"translate(0,{columnWidth / 2})\" d=\"M{-2 * columnMargin / 3},0 L{-columnMargin / 3},0 m-5,-5 l5,5 l-5,5\"/>\n        <text class=\"head\" dy=\"-13\">Activation grid</text>\n        <image xlink:href=\"assets/images/dogcat-grid.jpg\" width={inputWidth} height={inputWidth}/>\n        {#each range(numCells) as y}\n          {#each range(numCells) as x}\n            <rect \n              on:mouseover=\"set({timerCount: y * numCells + x})\"\n              stroke=\"#ddd\" \n              fill=\"#aaa\"\n              fill-opacity={y === windowY && x === windowX ? 0.01 : 0.5} \n              stroke-width=1 x={x * (cellWidth + cellPadding)} y={y * (cellWidth + cellPadding)} width={cellWidth} height={cellWidth}\n              />\n          {/each}\n        {/each}\n        <rect stroke=\"#ff6600\" pointer-events=\"none\" stroke-width=2 fill-opacity=0 x={windowX * cellWidth} y={windowY * cellWidth} width={cellWidth} height={cellWidth}/>\n      </g>\n\n    </g>\n\n  </svg>\n  <NotebookLink url=\"https://colab.sandbox.google.com/github/tensorflow/lucid/blob/master/notebooks/building-blocks/ActivationGrid.ipynb\"/>\n</div>\n\n<script>\nimport { range } from \"d3-array\";\nimport { format } from \"d3-format\";\n\nexport default {\n  components: {\n    Figure: \"../components/Figure.html\",\n    NotebookLink: \"../library/NotebookLink.html\"\n  },\n  data() {\n    return {\n      paused: true,\n      inputWidth: 250,\n      columnWidth: 150,\n      columnMargin: 50,\n      numCells: 14,\n      cellPadding: 0,\n\n      windowSize: 3,\n      windowX: 0,\n      windowY: 0,\n\n      activations: range,\n\n      timerCount: 47\n\n    };\n  },\n  computed: {\n    width: ({inputWidth, columnWidth, columnMargin}) => inputWidth * 2 + columnWidth * 3 + 4 * columnMargin,\n    height: ({inputWidth}) => inputWidth + 40,\n    clippedCount: ({timerCount, numCells}) => Math.round(timerCount) % (numCells * numCells),\n    windowX: ({clippedCount, numCells}) => clippedCount % numCells,\n    windowY: ({clippedCount, numCells}) => Math.floor(clippedCount / numCells),\n    cellWidth: ({inputWidth, numCells, cellPadding}) => (inputWidth + cellPadding) / numCells - cellPadding,\n    numInputCells: ({numCells, windowSize}) => numCells + windowSize - 1,\n    inputCellWidth: ({inputWidth, numInputCells, cellPadding}) => (inputWidth + cellPadding) / numInputCells - cellPadding,\n    activations: ({numCells}) => range(numCells).map(i => range(numCells).map( i => range(6).map(i => Math.random() - 0.5)))\n  },\n  helpers: {\n    range: range,\n    format: format(\" .5f\")\n  }\n}\n</script>\n\n<style>\n.head {\n  font-size: 14px;\n  font-weight: 600;\n  text-transform: uppercase;\n}\n.arrow {\n  fill: none;\n  stroke: black;\n}\n.figcaption {\n  fill: rgba(0, 0, 0, 0.6);\n  font-size: 14px;\n}\n</style>",
    "\n<!-- <div ref:controls style=\"grid-column: text/screen-end\">\n  <label><input type=radio bind:group=layerName value=\"mixed3b\"> mixed3b</label>\n  <label><input type=radio bind:group=layerName value=\"mixed4a\"> mixed4a</label>\n  <label><input type=radio bind:group=layerName value=\"mixed4b\"> mixed4b</label>\n  <label><input type=radio bind:group=layerName value=\"mixed4c\"> mixed4c</label>\n  <label><input type=radio bind:group=layerName value=\"mixed4d\"> mixed4d</label>\n  <label><input type=radio bind:group=layerName value=\"mixed4e\"> mixed4e</label>\n  <label><input type=radio bind:group=layerName value=\"mixed5a\"> mixed5a</label>\n  <label><input type=radio bind:group=layerName value=\"mixed5b\"> mixed5b</label>\n|\n  <label><input type=radio bind:group=gridSize value={0}> 0</label>\n  <label><input type=radio bind:group=gridSize value={1}> 1</label>\n  <label><input type=radio bind:group=gridSize value={2}> 2</label>\n  <label><input type=radio bind:group=gridSize value={3}> 3</label>\n  <label><input type=radio bind:group=gridSize value={4}> 4</label>\n|\n  <label><input type=checkbox bind:checked=showLabels> show labels</label>\n\n</div> -->\n\n\n<div class=\"atlas\" style=\"grid-column: screen\">\n  <Atlas id=\"inceptionv1_{layerName}\" bind:gridSize bind:showLabels scaleCountFactor=10 iconCrop=0.2/>\n</div>\n\n<script>\nexport default {\n  components: { \n    Atlas: \"../Atlas.html\"\n  },\n  data() {\n    return {\n      layerName: \"mixed4c\",\n      gridSize: 1\n    }\n  }\n}\n</script>\n\n<style>\n  ref:controls {\n    font-size: 10px;\n  }\n  .atlas {\n    position: relative;\n    height: 100vw;\n    margin: 20px;\n  }\n  .column {\n    position: relative;\n    height: 300px;\n  }\n</style>",
    "\n\n<div style=\"display: grid; grid-template-columns: 1fr 200px;\">\n  <div class=\"detail\">\n    <Atlas \n      id=\"inceptionv1_{layerName}\" \n      bind:gridSize\n      bind:homeX \n      bind:homeY \n      bind:homeScale\n      bind:aspectRatio\n      bind:scale\n      bind:gcx\n      bind:gcy\n      bind:showLabels\n    />\n  </div>\n  <div class=\"atlas\">\n    <AtlasThumbnail \n      {layerName}\n      gridSize={1}\n    />\n    <AtlasReticle\n      bind:aspectRatio\n      bind:scale\n      bind:gcx\n      bind:gcy\n    />\n  </div>\n</div>\n<script>\nexport default {\n  components: { \n    Atlas: \"../Atlas.html\",\n    AtlasThumbnail: \"../AtlasThumbnail.html\",\n    AtlasReticle: \"../AtlasReticle.html\"\n  },\n  data() {\n    return {\n      layerName: \"mixed4c\",\n      gridSize: 2,\n      homeScale: 14,\n      showLabels: true\n    }\n  }\n}\n</script>\n\n<style>\n  .atlas {\n    position: relative;\n    margin: 20px;\n    width: 120px;\n    height: 120px;\n  }\n  .detail {\n    height: 300px;\n  }\n</style>",
    "<div class=\"showapath\" style=\"display: grid; grid-template-columns: 1fr {height}px; \">  \n  <div>\n    <SetOfIcons\n      {pointList}\n      {layers}\n      {config}\n      {color}\n    />\n  </div>\n  <div class=\"atlas\" style=\"width:{height-atlasMargin*2}px; height:{height-atlasMargin*2}px; margin:{atlasMargin}px\">\n    <div class=\"thumbnail\">\n      <AtlasThumbnail\n        {layerName}\n        gridSize={1}\n        bind:clientWidth=viewWidth\n        bind:height=viewHeight\n      />\n    </div>\n    <svg \n      class=\"pathArrow\"\n      style=\"width: {edgeLength};\n        height: {edgeLength};\n        left: {(viewWidth - edgeLength) / 2};\n        top: {(viewHeight - edgeLength) / 2}\"\n      >\n      <defs>\n        <marker \n          id={'head' + uniqueId}\n          fill={color}\n          viewBox=\"0 0 10 10\" \n          refX=\"5\" \n          refY=\"5\"\n          markerWidth=\"5\" \n          markerHeight=\"5\"\n          orient=\"auto-start-reverse\"\n          >\n          <circle cx=\"5\" cy=\"5\" r=\"3\"/>\n        </marker>\n        <marker id={'arrow' + uniqueId}\n        fill={color} \n        viewBox=\"0 0 10 10\" \n        refX=\"5\" \n        refY=\"5\"\n        markerWidth=\"3\"\n        markerHeight=\"3\"\n        orient=\"auto-start-reverse\"\n        >\n          <path d=\"M 0 0 L 10 5 L 0 10 z\" />\n        </marker>\n      </defs>\n      <path\n        ref:clickPath\n        d={path_d}\n        stroke={color}\n        stroke-width=\"3\"\n        fill=\"transparent\"\n        marker-end=\"url(#{'arrow' + uniqueId})\"\n        marker-start=\"url(#{'head' + uniqueId})\"\n        />\n    </svg>\n  </div>\n  <AtlasDataLoader \n    id=\"inceptionv1_{layerName}\"\n    layer={0}\n    layout={0}\n    classFilter={0}\n    filter={0}\n    bind:config\n    bind:layers \n    bind:labels \n  />\n</div>\n\n<script>\nexport default {\n  components: { \n    AtlasThumbnail: \"../AtlasThumbnail.html\",\n    SetOfIcons: \"../SetOfIcons.html\",\n    AtlasDataLoader: '../AtlasDataLoader.html', \n  },\n  data() {\n    return {\n      gridSize: 1,\n      height: 160,\n      color: '#ff6600',\n      uniqueId: Math.random(),\n      atlasMargin: 20,\n    }\n  },\n  computed: {\n    numIcons: ({pointList}) => pointList.length,\n    edgeLength: ({viewWidth, viewHeight}) => {\n      if(viewWidth && viewHeight){\n        return Math.min(viewWidth, viewHeight)\n      }\n      return 0\n    },\n    topLeft: ({viewWidth, viewHeight, edgeLength}) => {\n      if(viewWidth && viewHeight){\n        return [(viewWidth - edgeLength) / 2, (viewHeight - edgeLength) / 2]\n      }\n      return [0,0]\n    },\n    path_d: ({pointList, topLeft, edgeLength}) => {\n      // need to adjust for size\n      let path_d = [];\n      let d = \"M\";\n      pointList.forEach(function(point){\n          d = d + (point[0]) * edgeLength  + \n            \" \" + (point[1]) * edgeLength + \" L\"\n\n        \n      })\n      path_d.push(d.substring(0, d.length - 2))\n      return path_d\n    },\n  },\n}\n</script>\n\n<style>\n  svg {\n    position: absolute;\n    pointer-events: none;\n  }\n  .thumbnail {\n    opacity: .2;\n  }\n  .atlas {\n    position: relative;\n  }\n  .pathArrow {\n    opacity: 1;\n  }\n  .column {\n    position: relative;\n  }\n  .set-of-icons {\n    position: relative;\n  }\n</style>",
    "\n\n<div style=\"\">\n  <div class=\"detail\">\n    <Atlas \n      id=\"inceptionv1_{layerName}\" \n      bind:gridSize\n      bind:homeX \n      bind:homeY \n      bind:homeScale\n      bind:aspectRatio\n      bind:scale\n      bind:gcx\n      bind:gcy\n      bind:showLabels\n      enableDragToPan={true}\n      enableClickToZoom={false}\n    />\n  </div>\n  <div class=\"atlas\">\n    <AtlasThumbnail \n      {layerName}\n    />\n    <AtlasReticle\n      bind:aspectRatio\n      bind:scale\n      bind:gcx\n      bind:gcy\n    />\n    {#if gcx && gcy}\n    <!-- <label>gcx: {@html gcx.toPrecision(4)}, gcy: {@html gcy.toPrecision(4)}</label> -->\n    {/if}\n  </div>\n</div>\n<script>\nexport default {\n  components: { \n    Atlas: \"../Atlas.html\",\n    AtlasThumbnail: \"../AtlasThumbnail.html\",\n    AtlasReticle: \"../AtlasReticle.html\"\n  },\n  data() {\n    return {\n      layerName: \"mixed4c\",\n      gridSize: 3,\n      homeScale: 16 * 3,\n      showLabels: true\n    }\n  }\n}\n</script>\n\n<style>\n  h4 {\n    margin-top: 0;\n  }\n  label {\n    font-size: 11px;\n    color: #ccc;\n  }\n  .atlas {\n    position: relative;\n    margin: 20px auto 0;\n    width: 150px;\n    height: 150px;\n  }\n  .detail {\n    height: 250px;\n  }\n</style>",
    "<div class=\"focus\">\n  <div class=\"atlas\">\n    <Atlas\n    id=\"inceptionv1_{layerName}\"\n    bind:gridSize\n    alphaAttributionFactor=10\n    bind:showLabels\n    scaleCountFactor=10\n    iconCrop=0.2\n    bind:classHeatmap\n  />\n  <AtlasReticle\n    bind:aspectRatio\n    bind:scale\n    bind:gcx\n    bind:gcy\n    background={false}\n    round={true}\n    enableDragging={false}\n  />\n  </div>\n  <div class=\"details\">\n    <div class=\"detail\">\n      <Atlas\n        id=\"inceptionv1_{layerName}\"\n        bind:gridSize\n        alphaAttributionFactor=10\n        bind:showLabels\n        scaleCountFactor=10\n        iconCrop=0.2\n        enableHover={false}\n        enableDragToPan={false}\n        enableClickToZoom={false}\n        bind:classHeatmap\n        bind:homeX \n        bind:homeY \n        bind:homeScale\n        bind:aspectRatio\n        bind:scale\n        bind:gcx\n        bind:gcy\n      />\n    </div>\n    <div class=\"figcaption\">When we map opacity to the amount that each activation contributes to \"fireboat\", we see a main cluster of icons showing red boats and splashing, spraying water. While there are some stray areas elsewhere, it seems that this is region of the atlas that is dedicated specifically to classifying red boats with splashing water nearby.</div>\n  </div>\n</div>\n<!-- <div>\n  {@html gcx},{@html gcy},{@html scale}\n</div> -->\n\n<script>\nexport default {\n  components: { \n    Atlas: \"../Atlas.html\",\n    AtlasReticle: \"../AtlasReticle.html\"\n  },\n  data() {\n    return {\n      layerName: \"mixed5b\",\n      gridSize: 1,\n      classHeatmap: 235,\n      homeX: 0.844,\n      homeY: 0.510,\n      homeScale: 6\n    }\n  }\n}\n</script>\n\n<style>\n  .focus {\n    display: grid;\n    align-items: center;\n    grid-template-columns: 1fr 350px;\n    grid-gap: 20px;\n    max-width: 1150px;\n    margin: 0 auto;\n  }\n  .atlas {\n    position: relative;\n    height: 712px;\n    width: 712px;\n  }\n  .atlas > :global(div) {\n    position: absolute;\n    top: 0;\n    left: 0;\n  }\n  .figcaption {\n    margin: 20px auto 0;\n    max-width: 250px;\n  }\n  .detail {\n    overflow: hidden;\n    height: 350px;\n    border: solid 3px #ff6600;\n    border-radius: 50%;\n  }\n  /* .detail > :global(div) {\n    position: absolute;\n    top: 0;\n    left: 0;\n  } */\n</style>",
    "<div class=\"focus\">\n  <div class=\"atlas\">\n    <Atlas\n      id=\"inceptionv1_{layerName}\"\n      bind:gridSize\n      alphaAttributionFactor=10\n      bind:showLabels\n      scaleCountFactor=10\n      iconCrop=0.2\n      bind:classHeatmap\n    />\n    <AtlasReticle\n      bind:aspectRatio=\"aspectRatio0\"\n      bind:scale=\"scale0\"\n      bind:gcx=\"gcx0\"\n      bind:gcy=\"gcy0\"\n      background={false}\n      enableDragging={false}\n      round={true}\n      annotationValue={1}\n    />\n    <AtlasReticle\n      bind:aspectRatio=\"aspectRatio1\"\n      bind:scale=\"scale1\"\n      bind:gcx=\"gcx1\"\n      bind:gcy=\"gcy1\"\n      background={false}\n      enableDragging={false}\n      round={true}\n      annotationValue={2}\n    />\n    <AtlasReticle\n      bind:aspectRatio=\"aspectRatio2\"\n      bind:scale=\"scale2\"\n      bind:gcx=\"gcx2\"\n      bind:gcy=\"gcy2\"\n      background={false}\n      enableDragging={false}\n      round={true}\n      annotationValue={3}\n    />\n  </div>\n  <div class=\"details\">\n    <Loupe width={loupeSize} height={loupeSize} label={1}>\n      <Atlas\n        id=\"inceptionv1_{layerName}\"\n        bind:gridSize\n        alphaAttributionFactor=10\n        bind:showLabels\n        scaleCountFactor=10\n        iconCrop=0.2\n        enableHover={false}\n        enableDragToPan={false}\n        enableClickToZoom={false}\n        bind:classHeatmap\n        bind:homeX=\"highlights[0].homeX\" \n        bind:homeY=\"highlights[0].homeY\" \n        bind:homeScale=\"highlights[0].homeScale\"\n        bind:aspectRatio=\"aspectRatio0\"\n        bind:scale=\"scale0\"\n        bind:gcx=\"gcx0\"\n        bind:gcy=\"gcy0\"\n      />\n    </Loupe>\n    <Loupe width={loupeSize} height={loupeSize} label={2}>\n      <Atlas\n        id=\"inceptionv1_{layerName}\"\n        bind:gridSize\n        alphaAttributionFactor=10\n        bind:showLabels\n        scaleCountFactor=10\n        iconCrop=0.2\n        enableHover={false}\n        enableDragToPan={false}\n        enableClickToZoom={false}\n        bind:classHeatmap\n        bind:homeX=\"highlights[1].homeX\" \n        bind:homeY=\"highlights[1].homeY\" \n        bind:homeScale=\"highlights[1].homeScale\"\n        bind:aspectRatio=\"aspectRatio1\"\n        bind:scale=\"scale1\"\n        bind:gcx=\"gcx1\"\n        bind:gcy=\"gcy1\"\n      />\n    </Loupe>\n    <Loupe width={loupeSize} height={loupeSize} label={3}>\n      <Atlas\n        id=\"inceptionv1_{layerName}\"\n        bind:gridSize\n        alphaAttributionFactor=10\n        bind:showLabels\n        scaleCountFactor=10\n        iconCrop=0.2\n        enableHover={false}\n        enableDragToPan={false}\n        enableClickToZoom={false}\n        bind:classHeatmap\n        bind:homeX=\"highlights[2].homeX\" \n        bind:homeY=\"highlights[2].homeY\" \n        bind:homeScale=\"highlights[2].homeScale\"\n        bind:aspectRatio=\"aspectRatio2\"\n        bind:scale=\"scale2\"\n        bind:gcx=\"gcx2\"\n        bind:gcy=\"gcy2\"\n      />\n    </Loupe>\n    <div class=\"figcaption\">In {layerName} we see we see the attribution toward \"fireboat\" is high in several clusters located in different positions around the atlas. One is very focused on windows, another on geysers and splashing water, and yet another on crane-like objects.</div>\n  </div>\n</div>\n<!-- <div>\n  {@html gcx3},{@html gcy3},{@html scale3}\n</div> -->\n\n<script>\nexport default {\n  components: { \n    Atlas: \"../Atlas.html\",\n    AtlasReticle: \"../AtlasReticle.html\",\n    Loupe: \"../components/Loupe.html\"\n  },\n  data() {\n    return {\n      loupeSize: 245,\n      layerName: \"mixed4d\",\n      gridSize: 1,\n      classHeatmap: 235,\n      highlights: [\n        {\n          homeX: 0.221,\n          homeY: 0.138,\n          homeScale: 10\n        },\n        {\n          homeX: 0.709,\n          homeY: 0.421,\n          homeScale: 10\n        },\n        {\n          homeX: 0.873,\n          homeY: 0.415,\n          homeScale: 10\n        },\n        {\n          homeX: 0.789,\n          homeY: 0.861,\n          homeScale: 10\n        }\n      ]\n\n    }\n  }\n}\n</script>\n\n<style>\n  .focus {\n    display: grid;\n    grid-template-columns: 530px 530px;\n    grid-gap: 10px;\n    width: 1070px;\n    margin: 0 auto;\n  }\n  .atlas {\n    position: relative;\n    height: 530px;\n  }\n  /* .atlas > :global(div) {\n    position: absolute;\n    top: 0;\n    left: 0;\n  } */\n  .details {\n    display: grid;\n    grid-template-columns: repeat(2, 255px);\n    grid-gap: 20px;\n    align-items: center;\n  }\n  .figcaption {\n    max-width: 180px;\n    margin: 0 auto;\n  }\n  /* .detail > :global(div) {\n    position: absolute;\n    top: 0;\n    left: 0;\n  } */\n</style>",
    "<div class=\"focus\">\n  <div class=\"column\">\n    <!-- Fireboat -->\n    <h4>Activations for Fireboat</h4>\n    <div class=\"atlas\">\n      <Atlas\n        id=\"inceptionv1_{layerName}\"\n        bind:gridSize\n        alphaAttributionFactor=10\n        scaleCountFactor=10\n        iconCrop=0.2\n        classHeatmap={235}\n      />\n      <AtlasReticle\n        bind:aspectRatio=\"$focus3aspectRatio0\"\n        bind:scale=\"$focus3scale0\"\n        bind:gcx=\"$focus3gcx0\"\n        bind:gcy=\"$focus3gcy0\"\n        background={false}\n        round={true}\n        annotationValue={1}\n        enableDragging={false}\n      />\n      <AtlasReticle\n        bind:aspectRatio=\"$focus3aspectRatio1\"\n        bind:scale=\"$focus3scale1\"\n        bind:gcx=\"$focus3gcx1\"\n        bind:gcy=\"$focus3gcy1\"\n        background={false}\n        round={true}\n        annotationValue={2}\n        enableDragging={false}\n      />\n      <AtlasReticle\n        bind:aspectRatio=\"$focus3aspectRatio2\"\n        bind:scale=\"$focus3scale2\"\n        bind:gcx=\"$focus3gcx2\"\n        bind:gcy=\"$focus3gcy2\"\n        background={false}\n        round={true}\n        annotationValue={3}\n        enableDragging={false}\n      />\n      <AtlasReticle\n        bind:aspectRatio=\"$focus3aspectRatio3\"\n        bind:scale=\"$focus3scale3\"\n        bind:gcx=\"$focus3gcx3\"\n        bind:gcy=\"$focus3gcy3\"\n        background={false}\n        round={true}\n        annotationValue={4}\n        enableDragging={false}\n      />\n    </div>\n  </div>\n  <div class=\"column\">\n    <!-- Streetcar -->\n    <h4>Activations for Streetcar</h4>\n    <div class=\"atlas\">\n      <Atlas\n        id=\"inceptionv1_{layerName}\"\n        bind:gridSize\n        alphaAttributionFactor=10\n        scaleCountFactor=10\n        iconCrop=0.2\n        classHeatmap={287}\n      />\n      <AtlasReticle\n        bind:aspectRatio=\"$focus3aspectRatio0\"\n        bind:scale=\"$focus3scale0\"\n        bind:gcx=\"$focus3gcx0\"\n        bind:gcy=\"$focus3gcy0\"\n        background={false}\n        round={true}\n        color=\"#ffaa00\"\n        annotationValue={1}\n        enableDragging={false}\n      />\n      <AtlasReticle\n        bind:aspectRatio=\"$focus3aspectRatio1\"\n        bind:scale=\"$focus3scale1\"\n        bind:gcx=\"$focus3gcx1\"\n        bind:gcy=\"$focus3gcy1\"\n        background={false}\n        round={true}\n        color=\"#ffaa00\"\n        annotationValue={2}\n        enableDragging={false}\n      />\n      <AtlasReticle\n        bind:aspectRatio=\"$focus3aspectRatio2\"\n        bind:scale=\"$focus3scale2\"\n        bind:gcx=\"$focus3gcx2\"\n        bind:gcy=\"$focus3gcy2\"\n        background={false}\n        round={true}\n        color=\"#ffaa00\"\n        annotationValue={3}\n        enableDragging={false}\n      />\n      <AtlasReticle\n        bind:aspectRatio=\"$focus3aspectRatio3\"\n        bind:scale=\"$focus3scale3\"\n        bind:gcx=\"$focus3gcx3\"\n        bind:gcy=\"$focus3gcy3\"\n        background={false}\n        round={true}\n        color=\"#ffaa00\"\n        annotationValue={4}\n        enableDragging={false}\n      />\n    </div>\n  </div>\n</div>\n\n<script>\nexport default {\n  components: { \n    Atlas: \"../Atlas.html\",\n    AtlasReticle: \"../AtlasReticle.html\"\n  },\n  data() {\n    return {\n      layerName: \"mixed4d\",\n      gridSize: 1\n    }\n  }\n}\n</script>\n\n<style>\n  .focus {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 20px;\n    width: 1260px;\n    margin: 0 auto;\n  }\n  .column {\n    width: 620px;\n  }\n  .atlas {\n    position: relative;\n    width: 620px;\n    height: 620px;\n  }\n  h4 {\n    border-bottom: solid 1px rgba(0, 0, 0, 0.1);\n    padding-bottom: 8px;\n    margin-top: 0;\n  }\n</style>\n\n",
    "<div class=\"details\">\n  <div class=\"row\">\n    <h4 style=\"width:{loupeSize}px\">Fireboat</h4>\n    <h4 style=\"width:{loupeSize}px\">Streetcar</h4>\n  </div>\n  <!-- row -->\n  <div class=\"row\">\n    <Loupe width={loupeSize} height={loupeSize} label={1}>\n      <Atlas\n        id=\"inceptionv1_{layerName}\"\n        bind:gridSize\n        alphaAttributionFactor=10\n        bind:showLabels\n        scaleCountFactor=10\n        iconCrop=0.2\n        enableHover={false}\n        enableDragToPan={false}\n        enableClickToZoom={false}\n        classHeatmap={235}\n        bind:homeX=\"$focus3Highlights[0].homeX\" \n        bind:homeY=\"$focus3Highlights[0].homeY\" \n        bind:homeScale=\"$focus3Highlights[0].homeScale\"\n        bind:aspectRatio=\"$focus3aspectRatio0\"\n        bind:scale=\"$focus3scale0\"\n        bind:gcx=\"$focus3gcx0\"\n        bind:gcy=\"$focus3gcy0\"\n      />\n    </Loupe>\n    <Loupe color=\"#ffaa00\" width={loupeSize} height={loupeSize} label={1}>\n      <Atlas\n        id=\"inceptionv1_{layerName}\"\n        bind:gridSize\n        alphaAttributionFactor=10\n        bind:showLabels\n        scaleCountFactor=10\n        iconCrop=0.2\n        enableHover={false}\n        enableDragToPan={false}\n        enableClickToZoom={false}\n        classHeatmap={287}\n        bind:homeX=\"$focus3Highlights[0].homeX\" \n        bind:homeY=\"$focus3Highlights[0].homeY\" \n        bind:homeScale=\"$focus3Highlights[0].homeScale\"\n        bind:aspectRatio=\"$focus3aspectRatio0\"\n        bind:scale=\"$focus3scale0\"\n        bind:gcx=\"$focus3gcx0\"\n        bind:gcy=\"$focus3gcy0\"\n      />\n    </Loupe>\n    <div class=\"figcaption\">\n      At {layerName}, Both \"streetcar\" and \"fireboat\" contain activations for what look like windows.\n    </div>\n  </div>\n  <!-- row -->\n  <div class=\"row\">\n    <Loupe width={loupeSize} height={loupeSize} label={2}>\n      <Atlas\n        id=\"inceptionv1_{layerName}\"\n        bind:gridSize\n        alphaAttributionFactor=10\n        bind:showLabels\n        scaleCountFactor=10\n        iconCrop=0.2\n        enableHover={false}\n        classHeatmap={235}\n        bind:homeX=\"$focus3Highlights[1].homeX\" \n        bind:homeY=\"$focus3Highlights[1].homeY\" \n        bind:homeScale=\"$focus3Highlights[1].homeScale\"\n        bind:aspectRatio=\"$focus3aspectRatio1\"\n        bind:scale=\"$focus3scale1\"\n        bind:gcx=\"$focus3gcx1\"\n        bind:gcy=\"$focus3gcy1\"\n      />\n    </Loupe>\n    <Loupe color=\"#ffaa00\" width={loupeSize} height={loupeSize} label={2}>\n      <Atlas\n        id=\"inceptionv1_{layerName}\"\n        bind:gridSize\n        alphaAttributionFactor=10\n        bind:showLabels\n        scaleCountFactor=10\n        iconCrop=0.2\n        enableHover={false}\n        enableDragToPan={false}\n        enableClickToZoom={false}\n        classHeatmap={287}\n        bind:homeX=\"$focus3Highlights[1].homeX\" \n        bind:homeY=\"$focus3Highlights[1].homeY\" \n        bind:homeScale=\"$focus3Highlights[1].homeScale\"\n        bind:aspectRatio=\"$focus3aspectRatio1\"\n        bind:scale=\"$focus3scale1\"\n        bind:gcx=\"$focus3gcx1\"\n        bind:gcy=\"$focus3gcy1\"\n      />\n    </Loupe>\n    <div class=\"figcaption\">\n      Both classes also contain activations for crane-like apparatuses, though they are less prominent than the window activations.\n    </div>\n  </div>\n  <!-- row -->\n  <div class=\"row\">\n    <Loupe width={loupeSize} height={loupeSize} label={3}>\n      <Atlas\n        id=\"inceptionv1_{layerName}\"\n        bind:gridSize\n        alphaAttributionFactor=10\n        bind:showLabels\n        scaleCountFactor=10\n        iconCrop=0.2\n        enableHover={false}\n        enableDragToPan={false}\n        enableClickToZoom={false}\n        classHeatmap={235}\n        bind:homeX=\"$focus3Highlights[2].homeX\" \n        bind:homeY=\"$focus3Highlights[2].homeY\" \n        bind:homeScale=\"$focus3Highlights[2].homeScale\"\n        bind:aspectRatio=\"$focus3aspectRatio2\"\n        bind:scale=\"$focus3scale2\"\n        bind:gcx=\"$focus3gcx2\"\n        bind:gcy=\"$focus3gcy2\"\n      />\n    </Loupe>\n    <Loupe color=\"#ffaa00\" width={loupeSize} height={loupeSize} label={3}>\n      <Atlas\n        id=\"inceptionv1_{layerName}\"\n        bind:gridSize\n        alphaAttributionFactor=10\n        bind:showLabels\n        scaleCountFactor=10\n        iconCrop=0.2\n        enableHover={false}\n        enableDragToPan={false}\n        enableClickToZoom={false}\n        classHeatmap={287}\n        bind:homeX=\"$focus3Highlights[2].homeX\" \n        bind:homeY=\"$focus3Highlights[2].homeY\" \n        bind:homeScale=\"$focus3Highlights[2].homeScale\"\n        bind:aspectRatio=\"$focus3aspectRatio2\"\n        bind:scale=\"$focus3scale2\"\n        bind:gcx=\"$focus3gcx2\"\n        bind:gcy=\"$focus3gcy2\"\n      />\n    </Loupe>\n    <div class=\"figcaption\">\n      \"Fireboat\" activations have much stronger attributions from water than \"streetcar\", where there is virtually no positive evidence.\n    </div>\n  </div>\n  <!-- row -->\n  <div class=\"row\">\n    <Loupe width={loupeSize} height={loupeSize} label={4}>\n      <Atlas\n        id=\"inceptionv1_{layerName}\"\n        bind:gridSize\n        alphaAttributionFactor=10\n        bind:showLabels\n        scaleCountFactor=10\n        iconCrop=0.2\n        enableHover={false}\n        enableDragToPan={false}\n        enableClickToZoom={false}\n        classHeatmap={235}\n        bind:homeX=\"$focus3Highlights[3].homeX\" \n        bind:homeY=\"$focus3Highlights[3].homeY\" \n        bind:homeScale=\"$focus3Highlights[3].homeScale\"\n        bind:aspectRatio=\"$focus3aspectRatio3\"\n        bind:scale=\"$focus3scale3\"\n        bind:gcx=\"$focus3gcx3\"\n        bind:gcy=\"$focus3gcy3\"\n      />\n    </Loupe>\n    <Loupe color=\"#ffaa00\" width={loupeSize} height={loupeSize} label={4}>\n      <Atlas\n        id=\"inceptionv1_{layerName}\"\n        bind:gridSize\n        alphaAttributionFactor=10\n        bind:showLabels\n        scaleCountFactor=10\n        iconCrop=0.2\n        enableHover={false}\n        enableDragToPan={false}\n        enableClickToZoom={false}\n        classHeatmap={287}\n        bind:homeX=\"$focus3Highlights[3].homeX\" \n        bind:homeY=\"$focus3Highlights[3].homeY\" \n        bind:homeScale=\"$focus3Highlights[3].homeScale\"\n        bind:aspectRatio=\"$focus3aspectRatio3\"\n        bind:scale=\"$focus3scale3\"\n        bind:gcx=\"$focus3gcx3\"\n        bind:gcy=\"$focus3gcy3\"\n      />\n    </Loupe>\n    <div class=\"figcaption\">\n      The activations for \"streetcar\" have much stronger attributions from buildings than does \"fireboat\". \n    </div>\n  </div>\n</div>\n\n<script>\nexport default {\n  components: { \n    Atlas: \"../Atlas.html\",\n    Loupe: \"../components/Loupe.html\"\n  },\n  data() {\n    return {\n      layerName: \"mixed4d\",\n      gridSize: 1,\n      loupeSize: 220\n    }\n  }\n}\n</script>\n\n\n<style>\n \n  .details {\n    margin: 10px auto 0;\n    max-width: 800px;\n  }\n  h4 {\n    text-align: center;\n    margin: 0;\n  }\n  .details .row {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    align-items: center;\n    grid-gap: 30px;\n    margin-bottom: 20px;\n  }\n  .detail {\n    height: 220px;\n    position: relative;\n    overflow: hidden;\n    border: solid 3px #ffaa00;\n    border-radius: 50%;\n  }\n  .row .detail:first-of-type {\n    border-color: #ff6600;\n  }\n\n</style>",
    "<div>\n  <span>Loading …</span>\n</div>\n\n<style>\ndiv {\n  display: table;\n  text-align: center;\n  color: rgba(0, 0, 0, 0.3);\n  font-size: 12px;\n  line-height: 100%;\n  height: 100%;\n  width: 100%;\n}\nspan {\n  display: table-cell;\n  vertical-align: middle;\n}\n</style>",
    "<Radar bind:ready />\n\n{#if ready}\n  <AtlasDataLoader \n    {id} \n    {layer} \n    {layout}\n    {classFilter}\n    {filter}\n    bind:config\n    bind:layers \n    bind:labels \n  />\n{/if}\n\n  <div\n    ref:root\n    bind:clientWidth=viewWidth\n    bind:clientHeight=viewHeight\n  >\n    <div\n      ref:stage\n      class=\"{(mouseMoveMode == 'pan' & enableDragToPan) ? 'panning' : ''}\"\n      on:mousedown=\"mouseDown(event)\" on:mousemove=\"mouseMove(event)\" \n      on:mouseenter=\"mouseEnter(event)\" on:mouseout=\"mouseOut(event)\"\n    >\n      <Zoom\n        ref:zoom\n        bind:scale\n        bind:unit\n        bind:gcx\n        bind:gcy\n        width={viewWidth}\n        height={viewHeight}\n      />\n      <canvas\n        ref:canvas\n        width={viewWidth * screenResolution}\n        height={viewHeight * screenResolution}\n        style=\"width: {viewWidth}px; height: {viewHeight}px;\"\n      ></canvas>\n      {#if showHoverIcon}\n        <div class=\"icon\" style=\"width:{iconSizeInPixels + 2 + 'px'}; height:{iconSizeInPixels + 2 + 'px'}; left:{topLeftCornerHover.x + 'px'}; top:{topLeftCornerHover.y + 'px'}\"></div>\n      {/if}\n    </div>\n\n    {#if labels && showHoverIcon && currentIconInfo && currentIconInfo.top_class_indices}\n      <div class=\"hover\" style=\"top: {(topLeftCornerHover.y + iconSizeInPixels + 10) + 'px'}; left: {(topLeftCornerHover.x + iconSizeInPixels + 10) + 'px'}\">\n        <table>\n        {#if classHeatmap > -1}\n          <tr>\n            <!-- <td>{(labels[classHeatmap])}</td> -->\n            <!-- <td style=\"text-align: right;\">{(currentIconInfo.top_class_values[currentIconInfo.top_class_indices.indexOf(classHeatmap)].toPrecision(2))}</td> -->\n          </tr>\n          <tr>\n            <td>top class: {labels[currentIconInfo.top_class_indices[0]]}</td>\n            <td style=\"text-align: right;\">{(currentIconInfo.top_class_values[0].toPrecision(2))}</td>\n          </tr>\n        {:else}\n          {#each currentIconInfo.top_class_indices.slice(0,5) as top, i}\n            <tr>\n              <td style=\"width: 10px; text-align: right; padding-right: 4px;\">{i + 1}.</td>\n              <td class=\"{i == 0 ? 'first': ''}\">{labels[top]}</td>\n              <td style=\"text-align: right;\">{currentIconInfo.top_class_values[i].toPrecision(2)}</td>\n            </tr>\n          {/each}\n        {/if}\n        </table>\n        {#if showHoverImage}\n          <canvas ref:hoverImage></canvas>\n        {/if}\n        <div style=\"font-size: 10px; margin-top: 4px; color: #999; text-align: right;\">Average of {currentIconInfo.num_activations} activations</div>\n      </div>\n    {/if}\n\n  </div>\n\n<script>\nimport { default as load } from './load.js';\nimport { max } from 'd3-array';\n\nexport default {\n  components: { \n    AtlasDataLoader: './AtlasDataLoader.html', \n    Zoom: './Zoom.html',\n    Radar: './library/Radar.html'\n  },\n  data() {\n    return {\n      id: \"inceptionv1_mixed4c\",\n      \n      config: null,\n      layers: null,\n      labels: null,\n\n      layer: 0,\n      layout: 0,\n      classFilter: 0,\n      filter: 0,\n\n      minActivations: 1,\n\n      showLabels: false,\n      textShadow: false,\n      showHoverImage: false,\n\n      context: null,\n\n      alphaAttributionFactor: 0.02,\n      scaleCountFactor: 1,\n      classHeatmap: -1,\n      classHeatmapMultiplier: 1,\n      classHeatmapPositive: 1,\n\n      gridSize: null,\n      showGrid: false,\n\n      // for initial state, and going back to \"home\"\n      homeX: .5,\n      homeY: .5,\n      homeScale: 1,\n\n      iconCrop: 0.02,\n\n      // zoom factor\n      zoomFactors: {out: 0.5, in: 2},\n\n      // turn off features\n      enableClickToZoom: true,\n      enableHover: true,\n      enableDragToPan: true,\n\n\n      backgroundColor: 'white',\n      strokeColor: 'rgb(220, 220, 220)',\n      imageSmoothing: false,\n\n      // for positioning the hover icon\n      lastRecordedCanvasPos: {x: -100, y: -100},\n\n      // for managing panning off the screen\n      mouseDownScreenPos: {x: 0, y: 0},\n\n      // can be \"hover\" or \"pan\"\n      mouseMoveMode: 'hover',\n      onCanvas: false,\n\n      screenResolution: 1,\n\n      mouseDownTimer: 0,\n      mouseMoveFunction: function(){},\n      mouseUpFunction: function(){},\n\n    }\n  },\n  computed: {\n    maxAttributionValue: ({layers, layer}) => {\n      // return 0.25;\n      if (layers == null) return 0;\n      const l = layers[layer];\n      let max = 0;\n      l.forEach(x => {\n        x.forEach(y => {\n          if (y && y.num_activations > 500) {\n            const v = y.full_class_values[0];\n            if (v > max) max = v;\n          }\n        })\n      })\n      return max;\n      // return layers ? max(l, d => d ? max(d, dd => dd ? (dd.n > 50 ? (dd.top_class_values[dd.top_class_indices.indexOf(classHeatmap)]) : 0) : 0): 0) : 0;\n      },\n    aspectRatio: ({viewWidth, viewHeight}) => viewWidth / viewHeight,\n    // viewHeight: ({viewWidth}) => viewWidth / 1.5,\n    // Math.min of viewHeight/viewWidth to make sure it fits inside when scale = 1\n    minViewDimInPx: ({viewWidth, viewHeight}) => Math.min(viewWidth, viewHeight), \n    // defines top left corner of global in pixels, relative to the upper left corner of the canvas as 0,0\n    topLeft: ({gcx, gcy, scale, viewWidth, viewHeight, minViewDimInPx}) => {\n      return {\n        x: viewWidth / 2 - gcx * minViewDimInPx * scale,\n        y: viewHeight / 2 - gcy * minViewDimInPx * scale} \n    },\n    currentZoomIndex: ({scale, gridSize}) => {\n      let s = 0;\n      if (gridSize != null) {\n        s = gridSize;\n      } else {\n        if (scale > 1) s = 0;\n        if (scale > 2) s = 1;\n        if (scale > 4) s = 2;\n        if (scale > 8) s = 3;\n        if (scale > 16) s = 4;\n      }\n      return +s;\n    },\n    numIconsWide: ({currentZoomIndex, layers}) => {\n      if(layers && currentZoomIndex){\n        return layers[currentZoomIndex].length\n      }\n    },\n    iconSizeInPixels: ({config, minViewDimInPx, currentZoomIndex, scale}) => {\n      if(config){\n        return minViewDimInPx / (config.grid_size[currentZoomIndex]) * scale;\n      }\n    },\n    showHoverIcon: ({mouseMoveMode, onCanvas, currentIconInfo, enableHover}) => {\n      return enableHover && onCanvas && (mouseMoveMode == 'hover') && currentIconInfo\n    },\n    layerScale: ({minViewDimInPx, config, currentZoomIndex, scale}) => {\n      if(config){\n        return (minViewDimInPx / (config.icon_size * config.grid_size[currentZoomIndex])) * scale\n      }\n    }, \n    gridSelected: ({lastRecordedCanvasPos, topLeft, layerScale, config}) => {\n      if(config){\n        return {\n          x: Math.floor((lastRecordedCanvasPos.x - topLeft.x) / (layerScale * config.icon_size)),\n          y: Math.floor((lastRecordedCanvasPos.y - topLeft.y) / (layerScale * config.icon_size))\n        }        \n      }\n    }, \n    topLeftCornerHover: ({config, layerScale, topLeft, gridSelected}) => {\n      if(config){\n        return {\n          x: gridSelected.x * config.icon_size * layerScale + topLeft.x - 1,\n          y: gridSelected.y * config.icon_size * layerScale + topLeft.y - 1\n        }\n      }\n    },\n    currentIconInfo: ({layers, currentZoomIndex, gridSelected, classHeatmap}) => {\n      if(layers && layers[currentZoomIndex] && \n         layers[currentZoomIndex][gridSelected.y] && \n         layers[currentZoomIndex][gridSelected.y][gridSelected.x]\n         ){\n          const iconInfo = layers[currentZoomIndex][gridSelected.y][gridSelected.x];\n          if(iconInfo.num_activations > 0){\n            return iconInfo\n          }\n      }\n    }\n  },\n  onupdate({ changed, current, previous }) {\n    this.set({context: this.refs.canvas.getContext('2d')});\n    if (changed.maxAttributionValue || changed.minActivations || changed.classHeatmap || changed.classHeatmapMultiplier || changed.classHeatmapPositive || changed.labels || changed.showLabels || changed.viewWidth || changed.viewHeight || changed.scale || changed.iconCrop || changed.currentZoomIndex || changed.layers || changed.alphaAttributionFactor || changed.scaleCountFactor || changed.gcx || changed.gcy) {\n      this.render();\n    }\n    if (changed.currentIconInfo) {\n      this.updateIconHoverImage();\n    }\n\n  },\n  oncreate() {\n    this.home();\n  },\n  methods: {\n    fullscreen() {\n      this.refs.root.webkitRequestFullscreen();\n    },\n    mouseEnter() {\n      this.set({onCanvas: true})\n    },\n    mouseDown(event) {\n      // should this be set once, somewhere else? oncreate? \n      this.set({mouseMoveFunction: this.mouseMove.bind(this), mouseUpFunction: this.mouseUp.bind(this)});\n\n      const {mouseMoveFunction, mouseUpFunction} = this.get();\n\n      event.preventDefault();\n\n      // set event listeners on window\n      window.addEventListener(\"mousemove\", mouseMoveFunction);\n      window.addEventListener(\"mouseup\",mouseUpFunction);\n      // do I need to unset local listener? \n\n      this.set({mouseMoveMode: 'pan'})\n      this.set({mouseDownTimer: Date.now()})\n\n      // canvas position\n      this.set({lastRecordedCanvasPos: {x: event.offsetX, y: event.offsetY}})\n\n      // screenPosition at mousedown\n      this.set({mouseDownScreenPos: {x: event.screenX, y: event.screenY}})\n\n    },\n    mouseMove(event) {\n      const { mouseMoveMode } = this.get();\n\n      this.set({lastRecordedCanvasPos: {x: event.offsetX, y: event.offsetY}});\n\n      if (mouseMoveMode == 'pan') {\n        const {mouseDownScreenPos, gcx, gcy, enableDragToPan} = this.get();\n\n        // update gcx, gcy, mouseDownScreenPos\n        this.set({\n          mouseDownScreenPos: {x: event.screenX, y: event.screenY}\n        })\n\n        if(enableDragToPan){\n          this.refs.zoom.panTo(\n            this.toPercent(mouseDownScreenPos.x - event.screenX) + gcx,\n            this.toPercent(mouseDownScreenPos.y - event.screenY) + gcy,\n            0\n          )\n        } \n      }\n\n    },\n    mouseOut(event) {\n      this.set({\n        onCanvas: false\n      });\n    },\n    mouseUp(event) {\n      const {mouseDownTimer, mouseMoveMode, scale, zoomFactors, mouseMoveFunction, mouseUpFunction, lastRecordedCanvasPos, topLeft, gcx, gcy, enableClickToZoom} = this.get();\n\n      // reset mode to hover\n      this.set({mouseMoveMode: 'hover'})\n\n      // remove body event listeners\n      window.removeEventListener(\"mousemove\", mouseMoveFunction);\n      window.removeEventListener(\"mouseup\", mouseUpFunction);\n\n      // calculate offsets to determine to zoom or not\n      const clickDiff = (Date.now() - mouseDownTimer);\n      const clickDistance = Math.sqrt(\n        Math.pow(event.offsetX - lastRecordedCanvasPos.x, 2) + \n        Math.pow(event.offsetY - lastRecordedCanvasPos.y, 2)\n        );\n\n\n      // 200ms and 5 pixels distance is fairly arbitrary\n      if(clickDiff < 200 && clickDistance < 5) {\n        // ZOOM!\n        if(enableClickToZoom){\n          // use shift key to determine to zoom in or zoom out\n          let zoomBy = zoomFactors.in;\n          if(event.shiftKey){\n            zoomBy = zoomFactors.out;\n          }\n\n          let newCenter = {x: 0.5, y: 0.5}\n\n          // go home if scale < 1\n          let newScale = zoomBy * scale;\n          if(newScale > 1){\n            // use current mouse position to find new center position\n            const fixedPoint = {\n              x: this.toPercent(event.offsetX - topLeft.x),\n              y: this.toPercent(event.offsetY - topLeft.y)\n            }\n            newCenter = {\n              x: fixedPoint.x - ((fixedPoint.x - gcx)/zoomBy),\n              y: fixedPoint.y - ((fixedPoint.y - gcy)/zoomBy)\n            }\n          } else {\n            newScale = 1;\n          }\n          this.transitionTo(newCenter.x, newCenter.y, newScale, 500)\n        }\n      }\n    },\n    home() {\n      const {homeX, homeY, homeScale} = this.get();\n      this.transitionTo(homeX,homeY,homeScale,800)\n    },\n    transitionTo(x, y, scale, duration) {\n      this.refs.zoom.transitionTo(x,y,scale,duration);\n    },\n    zoomit(multiplier) {\n      const { scale } = this.get();\n      this.refs.zoom.scaleTo(scale * multiplier, 500)\n    },\n    iconToCanvasPosition(icon, layerIndex) {\n      const {config, scaleCountFactor, topLeft, layerScale, currentZoomIndex} = this.get();\n\n      const proportionalScaleCountFactor = scaleCountFactor / (currentZoomIndex + 1)\n      const scaleModifier = (Math.sqrt(Math.min(proportionalScaleCountFactor, icon.num_activations) / proportionalScaleCountFactor)) \n      const iconWidth = config.icon_size * layerScale * scaleModifier;\n\n      const sx = icon.localX * config.icon_size;\n      const sy = icon.localY * config.icon_size;\n\n      const tilePos_x = icon.grid_y * config.icon_size;\n      const tilePos_y = icon.grid_x * config.icon_size;\n\n      // pixel coordinate in the global coordinate space\n      const globalPixelPos_x = tilePos_x * layerScale;\n      const globalPixelPos_y = tilePos_y * layerScale;\n\n      const canvasPos_x = globalPixelPos_x + topLeft.x;\n      const canvasPos_y = globalPixelPos_y + topLeft.y;      \n\n      // calc scale adjust factor to center the image for the icon in it's box\n      const scaleAdjustFactor =  (1 - scaleModifier) * config.icon_size * layerScale  / 2;\n\n      const dx = canvasPos_x + scaleAdjustFactor;\n      const dy = canvasPos_y + scaleAdjustFactor;\n\n      return {sx, sy, dx, dy, iconWidth}\n    },\n    toPercent(p) {\n      const {scale, minViewDimInPx} = this.get();\n      return p / (scale * minViewDimInPx);\n    },\n    toPixels(p) {\n      const {scale, minViewDimInPx} = this.get();\n      return p * scale * minViewDimInPx;\n    },\n    clear() {\n      const {viewHeight, viewWidth, context, backgroundColor} = this.get();\n      context.globalAlpha = 1;\n      context.fillStyle= backgroundColor;\n      context.clearRect(0, 0, viewWidth, viewHeight);\n      context.fillRect(0, 0, viewWidth, viewHeight);\n    },\n    updateIconHoverImage() {\n      const {currentIconInfo, currentZoomIndex, iconCrop, config, showHoverImage} = this.get();\n      if(currentIconInfo && showHoverImage){\n        load(currentIconInfo.url).then(response => {\n          const hoverImageContext = this.refs.hoverImage.getContext('2d');\n          const {sx, sy, dx, dy, iconWidth} = this.iconToCanvasPosition(currentIconInfo, currentZoomIndex)\n          const iconOffset = (iconCrop * config.icon_size) / 2;\n          const edgeLength = Math.min(this.refs.hoverImage.height, this.refs.hoverImage.width)\n          hoverImageContext.drawImage(response,\n                          //source\n                          sy + iconOffset, sx + iconOffset, config.icon_size - iconOffset * 2, config.icon_size - iconOffset * 2,\n                          //destination\n                          0, 0, edgeLength, edgeLength\n                        );\n        })\n      }\n    },\n    render() {\n\n      const {imageSmoothing, minActivations, viewHeight, viewWidth, context, backgroundColor, config, layers, currentZoomIndex, strokeColor, maxAttributionValue, classHeatmapMultiplier} = this.get();\n\n      this.clear();\n      // context.imageSmoothingQuality = \"low\";\n      context.imageSmoothingEnabled = imageSmoothing;\n\n      if (config && layers) {\n        layers.forEach((icons, layerIndex) => {\n          const visibleLayers = [currentZoomIndex]\n\n          if (visibleLayers.indexOf(layerIndex) > -1) {\n\n            icons.forEach((columns, x) => {\n              columns.forEach((icon, y) => {\n                if (icon.num_activations >= minActivations) {\n\n                  const {dx, dy, iconWidth} = this.iconToCanvasPosition(icon, layerIndex);\n\n                  // If icon is in the viewport\n                  if (dx > -iconWidth && dx < viewWidth && dy > -iconWidth && dy < viewHeight) {\n                    \n                    // We want to draw a box before the icon has loaded so there isn't just whiteness.\n                    const {sx, sy, dx, dy, iconWidth} = this.iconToCanvasPosition(icon, layerIndex)\n                    context.globalAlpha = 0.75;\n                    context.strokeStyle = strokeColor;\n                    context.fillStyle = \"white\";\n                    context.beginPath();\n                    context.rect(dx, dy, iconWidth, iconWidth);\n                    context.stroke();\n                    context.fill();\n                    context.closePath();\n\n                    load(icon.url).then(response => {\n                      // check that we're still on the right layer/zoom\n                      const {currentZoomIndex, iconCrop, showLabels, textShadow} = this.get();\n                      if(currentZoomIndex == layerIndex) {\n                        const {alphaAttributionFactor, labels, config, classHeatmap, classHeatmapMultiplier, classHeatmapPositive} = this.get();\n\n                        let a = 1;\n                        if (classHeatmap > -1) {\n                          let i = icon.full_class_indices.indexOf(classHeatmap);\n                          if (i > -1) {\n                            a = icon.full_class_values[i] / maxAttributionValue;\n                            a = a * classHeatmapPositive;\n                            a = Math.max(0, a) * classHeatmapMultiplier;\n                          } else {\n                            a = 0.0;\n                          }\n                        }\n                        // let a = Math.min(1,\n                        //   Math.max(0.2, Math.pow(icon.top_class_values[0], 2) * \n                        //   1000 * alphaAttributionFactor));\n\n                        // get current values in case they changed while loading\n                        const {sx, sy, dx, dy, iconWidth} = this.iconToCanvasPosition(icon, layerIndex)\n\n                        // draw the icon\n                        context.globalAlpha = a;\n                        const iconOffset = (iconCrop * config.icon_size) / 2;\n                        context.clearRect(dx + 1, dy + 1, iconWidth - 2, iconWidth - 2);\n                        context.drawImage(response,\n                          //source\n                          sy + iconOffset, sx + iconOffset, config.icon_size - iconOffset * 2, config.icon_size - iconOffset * 2,\n                          //destination\n                          dx, dy, iconWidth, iconWidth\n                        );\n                        context.globalAlpha = 1;\n\n                        if (showLabels && labels) {\n                          context.globalAlpha = 1;\n                          context.font=\"10px Helvetica\";\n                          if (textShadow) {\n                            context.lineWidth = 2;\n                            context.strokeStyle = \"rgba(0, 0, 0, 0.8)\";\n                            context.strokeText(labels[icon.top_class_indices[0]], dx + 4, dy + iconWidth - 4, iconWidth - 8);\n                          }\n                          context.fillStyle = \"rgba(255, 255, 255, 1)\"\n                          context.fillText(labels[icon.top_class_indices[0]], dx + 4, dy + iconWidth - 4, iconWidth - 8);\n                        }\n\n                      }\n\n                    })\n                  }\n                }\n              })\n            })\n          }\n        })\n      }\n    }\n    }\n  }\n\n</script>\n\n\n<style>\n  ref:root {\n    position: relative;\n    width: 100%;\n    height: 100%;\n    contain: layout;\n  }\n  ref:stage {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n  }\n  ref:stage.panning {\n    cursor: move;\n  }\n  ref:canvas {\n    position: absolute;\n    top: 0;\n    left: 0;\n    border-radius: 8px;\n  }\n  .hover {\n    color: white;\n    position: absolute;\n    font-size: 12px;\n    line-height: 14px;\n    background: rgba(0, 0, 0, 0.8);\n    padding: 6px;\n    pointer-events: none;\n    border-radius: 0 8px 8px 8px;\n    border: solid 1px rgba(255, 255, 255, 0.4);\n    box-sizing: border-box;\n    box-shadow: 0 1px 8px rgba(0, 0, 0, 0.4);\n    width: 200px;\n    z-index: 10000;\n  }\n  .hover table {\n    width: 100%;\n    margin-bottom: 0;\n  }\n  .hover td {\n    font-size: 12px;\n    border-bottom: solid 1px rgba(255, 255, 255, 0.2);\n    padding: 6px 0;\n    margin: 6px 0;\n    color: rgba(255, 255, 255, 0.8);\n    overflow: ellipsis;\n  }\n  .hover td.first {\n    color: rgba(255, 255, 255, 1.0);\n    font-weight: bold;\n  }\n\n  .icon {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    border-radius: 4px;\n    border: solid 3px black;\n    pointer-events: none;\n    box-sizing: border-box;\n  }\n</style>",
    "<button\n  on:click=\"fire('click')\"\n>\n  <slot></slot>\n</button>\n\n<script>\nexport default {\n\n}\n\n</script>\n\n<style>\n  button {\n    /* border: solid 2px rgb(255, 130, 0); */\n    outline: none;\n    font-size: 13px;\n    border: none;\n    color: white;\n    padding: 0 4px;\n    background-color: rgb(255, 130, 0);\n    font-weight: 500;\n    height: 32px;\n    line-height: 1em;\n    border-radius: 4px;\n    text-transform: uppercase;\n    align-items: center;\n    justify-content: center;\n    box-sizing: border-box;\n    vertical-align: middle;\n    -webkit-font-smoothing: antialiased;\n  }\n</style>",
    "<div ref:root>\n  <Placeholder>\n    <Atlas \n      ref:overview\n      {id}\n      {classHeatmap}\n      gridSize={1} \n      iconCrop={0.3} \n      {scaleCountFactor} \n      alphaAttributionFactor={10}\n      backgroundColor=\"#f0f0f0\"\n    />\n    <AtlasReticle\n      bind:aspectRatio\n      bind:scale\n      bind:gcx\n      bind:gcy\n      enableDragging={true}\n    />\n  </Placeholder>\n</div>\n\n<script>\n  export default {\n    components: {\n      Atlas: \"../Atlas.html\",\n      AtlasReticle: \"../AtlasReticle.html\",\n      Placeholder: \"../library/Placeholder.html\"\n    },\n    data() {\n      return {\n        scaleCountFactor: 200\n      }\n    }\n  }\n</script>\n\n<style>\nref:root {\n  position: relative;\n  overflow: hidden;\n  box-sizing: border-box;\n}\n</style>",
    "<div class=\"stack\">\n{#each layers as layer, i}\n  <label class=\"layer {layerName == layer ? 'selected' : ''}\">\n    <input type=radio bind:group=layerName value={layer}>\n    <div style=\"width: 50px; position: relative;\">\n      <AtlasThumbnail layerName={layer} {classHeatmap}/>\n    </div>\n    <span>{layer}</span>\n  </label>\n{/each}\n</div>\n\n<script>\n  export default {\n    components: {\n      AtlasThumbnail: \"../AtlasThumbnail.html\"\n    },\n    data() { return {\n      layerName: \"mixed4c\",\n      layers: [\n        \"mixed3b\",\n        \"mixed4a\",\n        \"mixed4b\",\n        \"mixed4c\",\n        \"mixed4d\",\n        \"mixed4e\",\n        \"mixed5a\",\n        \"mixed5b\",\n      ],\n      classHeatmap: -1\n    }; }\n  }\n</script>\n\n<style>\n.layer {\n  position: relative;\n  cursor: pointer;\n  display: grid;\n  align-items: center;\n  grid-template-columns: 1fr 1.5fr;\n  font-size: 11px;\n  text-transform: uppercase;\n  padding: 5px 16px 5px 16px;\n  color: grey;\n  border-left: solid 3px rgba(255, 255, 255, 0);\n  border-bottom: solid 1px rgba(0, 0, 0, 0.1);\n}\n.layer input {\n  position: absolute;\n  opacity: 0;\n}\n.layer span {\n  margin-left: 8px;\n}\n.layer.selected {\n  border-left-color: rgb(255, 130, 0);\n  color: rgb(255, 130, 0);\n  background-color: rgba(255, 130, 0, 0.08);\n  font-weight: bold;\n}\n.layer :global(canvas) {\n  opacity: 0.5;\n}\n.layer.selected :global(canvas) {\n  /* opacity: 1; */\n}\n</style>",
    "<div class=\"chooser\">\n  {#each labels as l}\n    <label class=\"{classHeatmap === l.i ? 'selected' : ''}\">\n      <input type=radio bind:group=classHeatmap value={l.i}>\n      <span title=\"{l.i}\">{l.label}</span>\n    </label>\n  {/each}\n</div>\n\n<script>\nimport classesToKeep from './../classesToKeep.js';\nimport inceptionLabels from './../Labels.js';\n\nexport default {\n  data() {\n    return {\n      classesToKeep,\n      inceptionLabels,\n      classHeatmap: 235\n    }\n  },\n  computed: {\n    labels: ({inceptionLabels}) => {\n      let out = classesToKeep.map(k => {\n        let l = inceptionLabels.inception[k];\n        return {label: l, i: k};\n      });\n      return [{label: \"show all\", i: -1}].concat(out);\n    }\n  }\n}\n</script>\n\n<style>\n  .chooser {\n    height: auto;\n  }\n  .chooser label {\n    position: relative;\n    font-size: 11px;\n    line-height: 1.2em;\n    display: block;\n    border-left: solid 3px white;\n    padding: 5px 16px 5px 16px;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow-y: hidden;\n    border-bottom: solid 1px rgba(0, 0, 0, 0.1);\n  }\n  .chooser label input {\n    position: absolute;\n    opacity: 0;\n  }\n  .chooser label.selected {\n    border-left-color: rgb(255, 130, 0);\n    color: rgb(255, 130, 0);\n    background-color: rgba(255, 130, 0, 0.08);\n    font-weight: bold;\n  }\n</style>",
    "<div class=\"{background ? 'background' : ''} {border ? 'border' : ''}\">\n  <Radar bind:ready>\n    <Placeholder {aspectRatio}>\n      {#if ready}\n        <img ref:image src=\"{src}\" alt=\"{alt}\">\n      {:else}\n        <Loading />\n      {/if}\n    </Placeholder>\n  </Radar>\n</div>\n\n<script>\n  export default {\n    components: {\n      Radar: \"./Radar.html\",\n      Loading: \"./Loading.html\",\n      Placeholder: \"./Placeholder.html\"\n    },\n    data() {\n      return {\n        ready: false,\n        src: \"\",\n        alt: \"\",\n        display: \"block\", //\"inline\", \"inline-block\", \"block\"\n        aspectRatio: 1, // width/height\n        border: true,\n        background: true,\n      }\n    }\n  }\n</script>\n\n<style>\n.background {\n  background: rgba(0, 0, 0, 0.05);\n}\n.border {\n  border: 1px solid rgba(0, 0, 0, 0.1);\n}\nref:image {\n  display: block;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n</style>",
    "<div ref:root>\n\n  <LazyImage \n    {src}\n    alt=\"class activation atlas\"\n  />\n\n  <svg viewBox=\"0 0 500 500\">\n  {#each ticks as i}\n    <line x2={500} y1={500 * i / gridSize} y2={500 * i / gridSize} stroke=\"black\" stroke-opacity=\"0.15\" stroke-dasharray=\"2,2\"/>\n  {/each}\n  \n  {#each ticks as i}\n    <line y2={500} x1={500 * i / gridSize} x2={500 * i / gridSize} stroke=\"black\" stroke-opacity=\"0.15\" stroke-dasharray=\"2,2\"/>\n  {/each}\n  </svg>\n\n</div>\n\n<script>\n  import {range} from \"d3-array\";\n  export default {\n    components: {\n      LazyImage: '../library/LazyImage.html'\n    },\n    data() {\n      return {\n        root: `https://storage.googleapis.com/activation-atlas/build/class_filter_inceptionv1/render/`,\n        classFilter: 62,\n        gridSize: 8\n      }\n    },\n    computed: {\n      ticks: ({gridSize}) => range(1, gridSize),\n      src: ({root, classFilter, gridSize}) => `${root}render--x=0--y=0--tries=3--alpha=False--tile_size=8--whiten=true--steps=1024--icon_size=80--grid_size=${gridSize}--layout=20_0.01_cosine--class_filter=${classFilter}--filter=None--layer=mixed5b--model=InceptionV1--sample_images=1000000--sample_type=random.jpg`\n    }\n  }\n </script>\n\n <style>\n  ref:root {\n    position: relative;\n  }\n  svg {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n  }\n </style>",
    "\n<div bind:clientWidth style=\"height: {height}px;\">\n  <canvas ref:canvas width={gridSize} height={gridSize} style=\"width: {clientWidth}px; height: {height}px;\"></canvas>\n</div>\n\n<script>\nimport { load } from 'lucid-components';\nimport classesToKeep from './classesToKeep.js';\n\nexport default {\n  data() {\n    return {\n      root: \"https://storage.googleapis.com/activation-atlas/build\",\n      model: \"inceptionv1\",\n      layerName: \"mixed4d\",\n      grid: 1,\n      layout: 0,\n      gridSize: 10,\n      classHeatmap: -1,\n      icons: []\n    };\n  },\n  computed: {\n    height: ({clientWidth}) => clientWidth,\n    id: ({model, layerName}) => model + \"_\" + layerName\n  },\n  oncreate() {\n    const {root, id, grid} = this.get();\n    load(`${root}/${id}/${id}.json`).then(config => {\n      // console.log(\"config: \", config)\n      if (config.class_filter == null) { config.class_filter = \"None\" }\n      if (config.filter == null) { config.filter = \"None\" }\n      if (!Array.isArray(config.layout)) {config.layout = [config.layout]}\n      if (!Array.isArray(config.layer)) {config.layer = [config.layer]}\n      if (!Array.isArray(config.filter)) {config.filter = [config.filter]}\n      this.set({gridSize: config.grid_size[grid]})\n      const url = `${root}/${id}/web/web--grid_size=${config.grid_size[grid]}--layout=${config.layout[0]}--class_filter=${config.class_filter}--filter=${config.filter[0]}--layer=${config.layer[0]}--model=${config.model}--sample_images=${config.sample_images}--sample_type=${config.sample_type}.json`\n      // console.log(\"config\", config)\n      load(url).then(web => {\n        // console.log(\"web\", web)\n        this.set({icons: web});\n        this.render();\n      })\n    })\n  },\n  onupdate({changed}) {\n    if (changed.classHeatmap) {\n      this.render();\n    }\n  },\n  methods: {\n    render() {\n      const {gridSize, icons, classHeatmap} = this.get();\n      const context = this.refs.canvas.getContext('2d');\n      let imageData = context.getImageData(0, 0, gridSize, gridSize);\n      let data = imageData.data;\n      // for (var i = 0; i < data.length; i += 4) {\n        // data[i] = 100;\n        // data[i + 1] = 100;\n        // data[i + 2] = 100;\n        // data[i + 3] = 255;\n      // }\n      for (const icon of icons) {\n        let heatmapMultiplier = 0.5;\n        if (classHeatmap > -1) {\n          let ci = classesToKeep.indexOf(classHeatmap);\n          let value = Math.max(0, icon.f[ci]);\n          heatmapMultiplier = Math.max(0.05, value * 5);\n          // console.log(ci, value)\n        }\n        const y = icon.x; //x,y switched on purpose \n        const x = icon.y; //x,y switched on purpose\n        // data[y * gridSize * 4 + x * 4 + 0] = (heatmapMultiplier) * 255 * 20;\n        // data[y * gridSize * 4 + x * 4 + 1] = (heatmapMultiplier) * 130 * 20;\n        // data[y * gridSize * 4 + x * 4 + 2] = (heatmapMultiplier) * 1 * 20;\n        data[y * gridSize * 4 + x * 4 + 3] = icon.n * heatmapMultiplier;\n      }\n      \n      context.putImageData(imageData, 0, 0);\n    }\n  }\n}\n\n\n</script>\n<style>\ncanvas {\n  image-rendering: pixelated;\n}\n</style>",
    "<div class=\"root\" bind:clientWidth=\"width\" bind:clientHeight=\"height\">\n  {#if scale}\n  <svg {width} {height}>\n    <path\n      class=\"{background ? '' : 'transparent'}\"\n      on:mousemove=\"mouseMove(event)\"\n      on:mouseup=\"mouseUp(event)\"\n      d=\"M0,0 L{width},0 L{width},{height} L0,{height} z M{left},{top} L{left},{bottom} L{right},{bottom}  L{right},{top} z\"\n    />\n  </svg>\n  <div\n    class=\"reticle {round ? 'round' : ''}\"\n    on:mousemove=\"mouseMove(event)\"\n    on:mousedown=\"mouseDown(event)\"\n    on:mouseup=\"mouseUp(event)\"\n    style=\"box-sizing:content-box;\n      border-color: {color};\n      top:{top-2.5}px;\n      left:{left-2.5}px; \n      width:{(right-left-1)}px; \n      height:{(bottom-top-1)}px; \n      cursor:{enableDragging ? 'move' : 'default'}\n      \"\n  >\n    {#if annotationValue}\n      <div class=\"annotationTabParent\" style=\"top:{(w * width-2)/2}px;\">\n        <div class=\"annotationTab\" style=\"background:{color};\">\n          <p class=\"annotation\"\n            >{annotationValue} \n          </p>\n        </div>\n      </div>\n    {/if}\n  </div>\n  {/if}\n</div>\n\n<script>\n  export default {\n    data() {\n      return {\n        width: 0,\n        height: 0,\n        dragging: false,\n        startPos: {x: -100, y: -100},\n        background: true,\n        round: false,\n        color: \"#ff6600\",\n        enableDragging: true,\n      }\n    },\n    computed: {\n      h: ({scale}) => 1 / scale,\n      w: ({scale, aspectRatio}) => 1 / scale * aspectRatio,\n      l: ({gcx, w, width}) => (gcx - w / 2),\n      t: ({gcy, h, height, aspectRatio}) => (gcy - h / 2),\n      r: ({l, w}) => l + w, \n      b: ({t, h}) => t + h,\n      left: ({l, width, gcx, gcy, scale, aspectRatio, w, r}) => l * width,\n      right: ({r, width}) => r * width,\n      top: ({t, height}) => t * height,\n      bottom: ({b, height}) => b * height,\n    },\n    methods: {\n      mouseUp() {\n        const { startPos, height, width, scale, aspectRatio, gcx, gcy} = this.get();\n        this.set({dragging: false})\n      },\n      mouseDown(event) {\n        const {enableDragging} = this.get();\n        if(enableDragging){\n          event.preventDefault();\n          this.set({dragging: true, startPos: {x: event.screenX, y: event.screenY}})\n        }\n      },\n      mouseMove(event) {\n        const {dragging, startPos, scale, width, aspectRatio, height, left, top} = this.get();\n        if(dragging){\n           this.set({\n              gcx: (event.screenX - startPos.x + left) / width + 1 / scale * aspectRatio / 2, \n              gcy: (event.screenY - startPos.y + top) / height + 1 / scale / 2, \n           })\n           this.set({\n            startPos: {x: event.screenX, y: event.screenY}\n           })\n        }\n      },\n    },\n  }\n</script>\n\n<style>\n  svg {\n    position: absolute;\n    top: 0;\n    left: 0;\n  }\n  svg path {\n    fill: white;\n    fill-opacity: 0.8;\n  }\n  svg path.transparent {\n    fill-opacity: 0;\n  }\n  .root {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n  }\n  .reticle {\n    top: 0;\n    left: 0;\n    position: absolute;\n    border: solid 3px black;\n    border-radius: 3px;\n    box-shadow: 0 0 6px rgba(0, 0, 0, 0.2);\n    box-sizing: border-box;\n    background: rgba(0, 0, 0, 0);\n  }\n  .reticle.round {\n    border-radius: 50%;\n  }\n  .annotationTabParent {\n    position: absolute;\n    left:0px;\n  }\n  .annotationTab {\n    width: 16px;\n    height: 16px;\n    left: -16px;\n    top: -8px;\n    position: absolute;\n    border-radius: 3px 0px 0px 3px;\n  }\n  .annotation {\n    font-size: 12px;\n    top: -6px;\n    left: 4px;\n    color: white;\n    position: absolute;\n    text-align: center;\n  }\n</style>",
    "<div ref:annotation bind:clientWidth=width bind:clientHeight=height>\n  <canvas ref:arrow width={width} height={arrowHeight}></canvas>\n  <div ref:icons class=\"icons\">\n    {#each imgList as icon, i}\n      <ClippedIcon\n        icon={icon}\n        width={100}\n        {config}\n      />\n    {/each}\n  </div>\n</div>\n\n\n<script>\nimport { load } from 'lucid-components';\nexport default {\n  components: { \n    ClippedIcon: \"./ClippedIcon.html\",\n  },\n  data() {\n    return {\n      container: null,\n      arrow: null,\n      arrowHeight: 30,\n      imgList: [],\n    }\n  },\n  computed: {\n    // choose the deepest available layer for the images\n    pathZoomIndex: ({layers}) => {\n      if(layers){\n        return layers.length - 1\n      }\n      return 1\n    },\n  },\n  onupdate({ changed, current, previous }) {\n    this.set({container: this.refs.icons, arrow: this.refs.arrow.getContext('2d')});\n    if (changed.pointList, changed.layers) {\n      this.render();\n    }\n    if (changed.width) {\n      this.drawArrow();\n    }\n  },\n  methods: {\n    drawArrow() {\n      const {arrow, width, color, arrowHeight} = this.get();\n\n      const vertAdjust = arrowHeight / 2;\n      arrow.clearRect(0, 0, width, arrowHeight);\n      \n      arrow.lineWidth=2;\n      arrow.strokeStyle=color\n      arrow.fillStyle=color\n      arrow.beginPath();\n      arrow.moveTo(2, vertAdjust);\n      arrow.lineTo(width, vertAdjust);\n      arrow.stroke();\n      arrow.beginPath();\n      arrow.arc(4,vertAdjust,4,0,2*Math.PI);\n      arrow.fill();\n      arrow.beginPath();\n      arrow.moveTo(width, vertAdjust);\n      arrow.lineTo(width - 10, vertAdjust - 5);\n      arrow.lineTo(width - 10, vertAdjust + 5);\n      arrow.fill();\n\n    },\n    render() {\n      const {pointList} = this.get();\n\n      if(pointList){\n\n        let lastIcon = {};\n        let i = 0;\n\n        let imgList = [];\n        pointList.forEach((globalPosPercent) => {\n          let thisIcon = this.getIconData({x: globalPosPercent[0], y: globalPosPercent[1]});\n\n          if(thisIcon != lastIcon){\n            imgList.push(thisIcon)\n            i += 1;\n          }\n          lastIcon = thisIcon;\n        })\n        this.set({imgList})\n        console.log(imgList)\n      }\n    },\n    getIconData(globalPosPercent) {\n      const {layers, pathZoomIndex} = this.get();\n      if(layers && layers[pathZoomIndex]) {\n\n        const gridSelected = {\n          // assumes layers is always square\n          x: Math.floor(globalPosPercent.x * layers[pathZoomIndex].length),\n          y: Math.floor(globalPosPercent.y * layers[pathZoomIndex].length),\n        }\n      \n        if(layers[pathZoomIndex][gridSelected.y] && \n            layers[pathZoomIndex][gridSelected.y][gridSelected.x]\n          ){\n            const currentIcon = layers[pathZoomIndex][gridSelected.y][gridSelected.x];\n            if(currentIcon.num_activations > 0){\n              return layers[pathZoomIndex][gridSelected.y][gridSelected.x];\n            }\n          }\n      }\n    }\n  }\n}\n</script>\n\n<style>\n  .icons {\n    display: grid;\n    grid-auto-flow: column;\n  }\n</style>",
    "<div class=\"root\" style=\"width: {width}px; height: {height}px;\">\n  <div class=\"loupe\" style=\"border-color: {color}\">\n    <slot></slot>\n  </div>\n  <div class=\"label\" style=\"background-color: {color};\">{label}</div>\n</div>\n\n<script>\n  export default {\n    data() {\n      return {\n        label: \"\",\n        width: 0,\n        height: 0,\n        color: \"#ff6600\"\n      }\n    }\n  }\n</script>\n\n<style>\n.root {\n  position: relative;\n}\n.loupe {\n  width: 100%;\n  height: 100%;\n  position: relative;\n  overflow: hidden;\n  border: solid 3px #ff6600;\n  border-radius: 50%;\n  position: relative;\n}\n.label {\n  color: white;\n  font-size: 14px;\n  font-weight: 600;\n  background: #ff6600;\n  border-radius: 6px 0 0 6px;\n  padding:0 6px;\n  position: absolute;\n  top: calc(50% - 12px);\n  right: calc(100% - 2px);\n  height: 24px;\n  line-height: 24px;\n}\n</style>",
    "<div class=\"root\">\n  <div class=\"head\">\n    <slot name=\"head\"></slot>\n  </div>\n  <div class=\"body\">\n    <slot name=\"body\"></slot>\n  </div>\n</div>\n\n<style>\n  .root {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n  }\n  :global() .head {\n    height: 60px;\n    padding: 0 16px;\n    border-bottom: solid 1px rgba(0, 0, 0, 0.2);\n    /* box-sizing: border-box; */\n    display: flex;\n    align-items: center;\n    flex: 0 0 60px;\n  }\n  :global() .head h2 {\n    font-size: 16px;\n    font-weight: bold;\n    line-height: 1.4em;\n    margin: 0;\n    padding: 0;\n    border: none;\n  }\n  :global() .body {\n    position: relative;\n    flex: 1;\n    overflow-y: scroll;\n    font-size: 11px;\n    line-height: 1.6em;\n  }\n  :global() .body h3 {\n    font-size: 12px;\n    font-weight: 600;\n    line-height: 1.2em;\n    text-transform: uppercase;\n    margin: 8px 0;\n    height: auto;\n    border-top: solid 1px rgba(0, 0, 0, 0.1);\n    padding-top: 1em;\n  }\n</style>",
    "<div ref:capture>\n<!-- <p style=\"position: absolute; left: 0; right: 0;\">x: {x} y: {y} scale: {scale}</p> -->\n\n</div>\n\n\n<script>\n// import {zoom as d3zoom} from 'd3-zoom';\n// import {event as d3event, select as d3select} from 'd3-selection';\nimport { tween } from 'svelte-extras';\nimport * as eases from 'eases-jsnext';\n\nexport default {\n  data() {\n    return {\n      width: 100,\n      height: 100,\n      gcx: 0.5,\n      gcy: 0.5,\n      scx: 0.5,\n      scy: 0.5,\n      unit: 100,\n\n      //tweenTarget: {\n      //  scale: null, gcx: null, gcy: null\n      //}\n    }\n  },\n  computed: {\n    //translateX: ({gcx, scx, scale, width}) =>  scx * width - gcx * scale * width,\n    //translateY: ({gcy, scy, scale, height}) => scy * height - gcy * scale * height,\n    //transformString: ({translateX, translateY, scale}) => `translate(${translateX},${translateY})scale(${scale})`,\n    scale: ({width, unit}) => {\n      return width / unit\n    }\n  },\n  oncreate() {\n  },\n  methods: {\n    tween,\n    setScale(scale) {\n      const {width} = this.get();\n      this.set({'unit': width / scale})\n    },\n    panTo(newgcx, newgcy, duration) {\n      if (duration === undefined) duration = 1000;\n      if(duration == 0) {\n        this.set({gcx: newgcx, gcy: newgcy})\n      } else {\n        this.tween('gcx', newgcx, {duration, easing: eases.cubicInOut})\n        this.tween('gcy', newgcy, {duration, easing: eases.cubicInOut})\n      }\n    },\n    scaleTo(newScale, duration) {\n      if (duration === undefined) duration = 1000;\n      const {width} = this.get();\n      this.tween('unit', width / newScale, {duration, easing: eases.cubicInOut})\n    },\n    transitionTo(newgcx, newgcy, newScale, duration) {\n      if (duration === undefined) duration = 1000;\n      const {width} = this.get();\n      const newUnit = width / newScale;\n      this.tween('unit', newUnit, {duration, easing: eases.cubicInOut})\n      this.tween('gcx', newgcx, {duration, easing: eases.cubicInOut})\n      this.tween('gcy', newgcy, {duration, easing: eases.cubicInOut})\n    },\n  }\n}\n</script>\n\n<style>\nref:capture {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0);\n  box-sizing: border-box;\n}\n</style>",
    "<div class=\"root\" bind:clientWidth style=\"display: {display}; padding-bottom: {100 / aspectRatio}%\">\n  <div class=\"container\">\n    <slot></slot>\n  </div>\n</div>\n\n<script>\n  export default {\n    data() {\n      return {\n        display: \"block\",\n        aspectRatio: 1,\n        clientWidth: 0,\n        \n      }\n    },\n    computed: {\n      width: ({clientWidth}) => clientWidth,\n      height: ({width, aspectRatio}) => width / aspectRatio\n    }\n  }\n</script>\n\n<style>\n.root {\n  position: relative;\n  box-sizing: border-box;\n}\n.container {\n  position: absolute;\n  box-sizing: border-box;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n</style>"
  ],
  "names": [],
  "mappings": "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"
}